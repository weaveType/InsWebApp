<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper      
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"      
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	@subject     : 일반유저 관련 처리를 담당하는 Sql Mapper
	@description : 일반유저 관련 처리를 담당하는 Sql Mapper
	@author      : Inswave
	@since       : 2025/07/02
	@modification
	===========================================================
	DATE              AUTHOR             DESC
	===========================================================
	2025/07/02              Inswave             최초 생성
 -->
<mapper namespace="com.demo.proworks.domain.user">
    <insert id="insertUser" parameterType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반유저를 등록한다. -->	
    		
        INSERT INTO USERS   /* QueryID : com.demo.proworks.domain.user.insertUser */
        ( 
            USER_ID
            <if test="username     != null"> , USERNAME      </if>
            <if test="birthdate    != null"> , BIRTHDATE     </if>
            <if test="phoneNumber != null"> , PHONE_NUMBER  </if>
            <if test="email        != null"> , EMAIL         </if>
            <if test="password     != null"> , PASSWORD      </if>
            <if test="roleId      != null"> , ROLE_ID       </if>
            <if test="emailConsent!= null"> , EMAIL_CONSENT </if>
            <if test="updatedAt   != null"> , UPDATED_AT    </if>
            <if test="createdAt   != null"> , CREATED_AT    </if>
            <if test="deletedAt   != null"> , DELETED_AT    </if>
        )
        VALUES  
        ( 
            #{userId}
            <if test="username     != null"> , #{username}      </if>
            <if test="birthdate    != null"> , #{birthdate}     </if>
            <if test="phoneNumber != null"> , #{phoneNumber}  </if>
            <if test="email        != null"> , #{email}         </if>
            <if test="password     != null"> , #{password}      </if>
            <if test="roleId      != null"> , #{roleId}       </if>
            <if test="emailConsent!= null"> , #{emailConsent} </if>
            <if test="updatedAt   != null"> , #{updatedAt}    </if>
            <if test="createdAt   != null"> , #{createdAt}    </if>
            <if test="deletedAt   != null"> , #{deletedAt}    </if> 
        )          
    </insert>	
	
    <update id="updateUser" parameterType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반유저를 갱신한다. -->
    	
        UPDATE USERS    /* QueryID : com.demo.proworks.domain.user.updateUser */      
      	  SET  
                USER_ID       = #{userId}              	                       
            <if test="username     != null"> , USERNAME      = #{username}      </if>
            <if test="birthdate    != null"> , BIRTHDATE     = #{birthdate}     </if>
            <if test="phoneNumber != null"> , PHONE_NUMBER  = #{phoneNumber}  </if>
            <if test="email        != null"> , EMAIL         = #{email}         </if>
            <if test="password     != null"> , PASSWORD      = #{password}      </if>
            <if test="roleId      != null"> , ROLE_ID       = #{roleId}       </if>
            <if test="emailConsent!= null"> , EMAIL_CONSENT = #{emailConsent} </if>
            <if test="updatedAt   != null"> , UPDATED_AT    = #{updatedAt}    </if>
            <if test="createdAt   != null"> , CREATED_AT    = #{createdAt}    </if>
            <if test="deletedAt   != null"> , DELETED_AT    = #{deletedAt}    </if>                 
        WHERE   
                USER_ID       = #{userId}      
    </update>
	
    <delete id="deleteUser" parameterType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반유저를 삭제한다. -->
    	
        DELETE FROM USERS   /* QueryID : com.demo.proworks.domain.user.deleteUser */ 
        WHERE   
                USER_ID       = #{userId}              
    </delete>
	
    <select id="selectUser" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반유저를 상세 조회한다. -->	
        SELECT     /* QueryID : com.demo.proworks.domain.user.selectUser */
            USER_ID as userId, USERNAME as username, BIRTHDATE as birthdate, PHONE_NUMBER as phoneNumber, EMAIL as email, PASSWORD as password, ROLE_ID as roleId, EMAIL_CONSENT as emailConsent, UPDATED_AT as updatedAt, CREATED_AT as createdAt, DELETED_AT as deletedAt
        FROM USERS 
        WHERE 
                USER_ID       = #{userId}      			
    </select>
	
    <select id="selectListUser" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반유저 목록을 조회한다. -->
           SELECT    /* QueryID : com.demo.proworks.domain.user.selectListUser */
               USER_ID as userId, USERNAME as username, BIRTHDATE as birthdate, PHONE_NUMBER as phoneNumber, EMAIL as email, PASSWORD as password, ROLE_ID as roleId, EMAIL_CONSENT as emailConsent, UPDATED_AT as updatedAt, CREATED_AT as createdAt, DELETED_AT as deletedAt		       
           FROM (
               SELECT  S.*, CEIL( (@ROWNUM:=@ROWNUM+1) / #{pageSize} ) AS PAGE
               FROM (				
                   SELECT 
                       *  		                  
                   FROM USERS
                   WHERE  1=1    		
	     																														
               ) S, (SELECT @ROWNUM := 0) TMP
           ) A
            WHERE PAGE = #{pageIndex}
    </select>
	
    <select id="selectListCountUser" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="long">
    <!-- 일반유저 목록의 카운트를 조회한다. -->
    
         SELECT    /* QueryID : com.demo.proworks.domain.user.selectListCountUser */
             COUNT(*) totcnt  		                  
         FROM USERS
         WHERE  1=1    		

    </select>

</mapper>
