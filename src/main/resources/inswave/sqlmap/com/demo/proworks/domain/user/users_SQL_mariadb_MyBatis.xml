<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper      
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"      
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	@subject     : 일반회원 관련 처리를 담당하는 Sql Mapper
	@description : 일반회원 관련 처리를 담당하는 Sql Mapper
	@author      : Inswave
	@since       : 2025/07/03
	@modification
	===========================================================
	DATE              AUTHOR             DESC
	===========================================================
	2025/07/03              Inswave             최초 생성
 -->
<mapper namespace="com.demo.proworks.domain.user">
    <insert id="insertUser" parameterType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반회원를 등록한다. -->	
    		
        INSERT INTO USERS   /* QueryID : com.demo.proworks.domain.user.insertUser */
        ( 
            USER_ID
            <if test="email        != null"> , EMAIL         </if>
            <if test="password     != null"> , PASSWORD      </if>
            <if test="roleId      != null"> , ROLE_ID       </if>
            <if test="name         != null"> , NAME          </if>
            <if test="emailConsent!= null"> , EMAIL_CONSENT </if>
            <if test="createdAt   != null"> , CREATED_AT    </if>
            <if test="updatedAt   != null"> , UPDATED_AT    </if>
        )
        VALUES  
        ( 
            #{userId}
            <if test="email        != null"> , #{email}         </if>
            <if test="password     != null"> , #{password}      </if>
            <if test="roleId      != null"> , #{roleId}       </if>
            <if test="name         != null"> , #{name}          </if>
            <if test="emailConsent!= null"> , #{emailConsent} </if>
            <if test="createdAt   != null"> , #{createdAt}    </if>
            <if test="updatedAt   != null"> , #{updatedAt}    </if> 
        )          
    </insert>	
	
    <update id="updateUser" parameterType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반회원를 갱신한다. -->
    	
        UPDATE USERS    /* QueryID : com.demo.proworks.domain.user.updateUser */      
      	  SET  
                USER_ID       = #{userId}              	                       
            <if test="email        != null"> , EMAIL         = #{email}         </if>
            <if test="password     != null"> , PASSWORD      = #{password}      </if>
            <if test="roleId      != null"> , ROLE_ID       = #{roleId}       </if>
            <if test="name         != null"> , NAME          = #{name}          </if>
            <if test="emailConsent!= null"> , EMAIL_CONSENT = #{emailConsent} </if>
            <if test="createdAt   != null"> , CREATED_AT    = #{createdAt}    </if>
            <if test="updatedAt   != null"> , UPDATED_AT    = #{updatedAt}    </if>                 
        WHERE   
                USER_ID       = #{userId}      
    </update>
	
    <delete id="deleteUser" parameterType="com.demo.proworks.domain.user.vo.UserVo">
    	<!-- 일반회원를 삭제한다. -->
    	
        DELETE FROM USERS   /* QueryID : com.demo.proworks.domain.user.deleteUser */ 
        WHERE   
                USER_ID       = #{userId}              
    </delete>
	
    <select id="selectUser" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="com.demo.proworks.domain.user.vo.UserVo">
<!-- 일반회원를 상세 조회한다. -->	
SELECT
    u.USER_ID as userId,
    u.EMAIL as email,
    u.PASSWORD as password,
    r.DESCRIPTION as description,
    u.NAME as name,
    u.EMAIL_CONSENT as emailConsent,
    u.CREATED_AT as createdAt,
    u.UPDATED_AT as updatedAt
FROM USERS u
JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID
WHERE u.USER_ID = #{userId}
</select>
	
    <select id="selectListUser" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="com.demo.proworks.domain.user.vo.UserVo">
<!-- 일반회원 목록을 조회한다. -->
SELECT    /* QueryID : com.demo.proworks.domain.user.selectListUser */
    u.USER_ID as userId,
    u.EMAIL as email,
    u.PASSWORD as password,
    u.ROLE_ID as roleId,
    r.DESCRIPTION as description,
    u.NAME as name,
    u.EMAIL_CONSENT as emailConsent,
    u.CREATED_AT as createdAt,
    u.UPDATED_AT as updatedAt
FROM (
    SELECT  S.*, CEIL((@ROWNUM:=@ROWNUM+1) / #{pageSize}) AS PAGE
    FROM (
        SELECT 
            u.*,
            r.DESCRIPTION
        FROM USERS u
        JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID
        WHERE 1=1
            /* 여기에 추가 조건이 있으면 작성 */
    ) S, (SELECT @ROWNUM := 0) TMP
) A
WHERE PAGE = #{pageIndex}
</select>
	
    <select id="selectListCountUser" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="long">
    <!-- 일반회원 목록의 카운트를 조회한다. -->
    
         SELECT    /* QueryID : com.demo.proworks.domain.user.selectListCountUser */
             COUNT(*) totcnt  		                  
         FROM USERS
         WHERE  1=1    		

    </select>

<select id="selectUserByEmail" parameterType="com.demo.proworks.domain.user.vo.UserVo" resultType="com.demo.proworks.domain.user.vo.UserVo">
<!-- 이메일로 일반회원을 상세 조회한다. -->	
        SELECT     /* QueryID : com.demo.proworks.domain.user.selectUser */
            USER_ID as userId, EMAIL as email, PASSWORD as password, ROLE_ID as roleId, NAME as name, EMAIL_CONSENT as emailConsent, CREATED_AT as createdAt, UPDATED_AT as updatedAt
        FROM USERS 
        WHERE 
                EMAIL       = #{email}
</select>
</mapper>
