<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenName="문자열 관련 함수" meta_screenId="$c.str" meta_screenDesc="문자열 관련 함수를 작성한다.">
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map"/>
			<w2:workflowCollection/>
		</xf:model>
		<w2:layoutInfo/>
		<w2:publicInfo method="scwin.serialize,scwin.lpad,scwin.rpad,scwin.formatSSN,scwin.formatPhone,scwin.formatTime,scwin.getLocale,scwin.existKorean,scwin.isKorean,scwin.isFinalConsonant,scwin.attachPostposition,scwin.isBizID,scwin.isSSN,scwin.isEmail,scwin.isPhone,scwin.replaceAll,scwin.trim,scwin.getByteLength,scwin.__formatPhone"/>
		<script lazy="false" type="text/javascript"><![CDATA[// =============================================================================
/**
 * 문자열 관련 함수를 작성한다.
 *
 * @author Inswave Systems
 * @class str
 * @namespace $c.str
 */
// =============================================================================

scwin.onpageload = function () {

};

/**
 * @method
 * @name serialize
 * @description XML, JSON 객체를 String 타입으로 반환한다.
 * @param {Object} object String으로 변환할 JSON 객체
 * @param {String} replacer 치환할 문자열
 * @param {Number} space 여백 수
 * @returns {String String으로 변환된 객체
 * @hidden N
 * @exception 
 */
scwin.serialize = function (object, replacer, space) {
    if (typeof object === 'string') {
        return object;
    } else if ($c.util.isJSON(object)) {
        return JSON.stringify(object, replacer, space);
    } else if ($c.util.isXmlDoc(object)) {
        return WebSquare.xml.serialize(object);
    } else {
        return object;
    }
};


/**
 * @method
 * @name lpad
 * @description 좌측에 문자열 채우기
 * @param {String} str 포멧터를 적용할 문자열
 * @param {Number} length 0 으로 채울 길이
 * @param {String} char 채우고자하는 문자(char)
 * @returns {String} 일정길이 만큼 char으로 채워진 문자열
 * @hidden N
 * @exception
 * @example
$c.str.lpad("24", 4, "0"); // "0024"
$c.str.lpad("11321", 8, "A"); // "AAA11321" 
 */
scwin.lpad = function (str, length, char) {
    if (typeof str === "number") {
        str = str.toString();
    }

    if (char.length > length) {
        console.warn("[$c.str.lpad] 오류 : 채우고자 하는 문자열이 요청 길이보다 큽니다");
        return str + "";
    }

    while (str.length < length) {
        str = char + str;
    }

    str = str.length >= length ? str.substring(0, length) : str;
    return str;
};

/**
 * @method
 * @name rpad
 * @description 우측에 문자열 채우기
 * @param {String} str 포멧터를 적용할 문자열
 * @param {Number} length 0 으로 채울 길이
 * @param {String} char 채우고자하는 문자(char)
 * @returns {String} 일정길이 만큼 char으로 채워진 문자열
 * @hidden N
 * @exception
 * @example
$c.str.rpad("24", 4, "0"); // "2400"
$c.str.rpad("11321", 8, "A"); // "11321AAA"
 */
scwin.rpad = function (str, length, char) {
    if (char.length > length) {
        console.warn("[$c.str.rpad] 오류 : 채우고자 하는 문자열이 요청 길이보다 큽니다");
        return str + "";
    }

    while (str.length < length) {
        str += char;
    }

    str = str.length >= length ? str.substring(0, length) : str;
    return str;
};

/**
 * @method
 * @name formatSSN
 * @description 주민번호 문자열에 Formatter(######-#######)를 적용하여 반환한다.
 * @param {String} str 주민번호 문자열
 * @returns {String} 포멧터가 적용된 주민번호 문자열
 * @hidden N
 * @exception
 * @example
$c.str.formatSSN("1234561234567");  // "123456-1234567"
 */
scwin.formatSSN = function (str) {
    const front = String(str).substr(0, 6);
    const back = String(str).substr(6, 7);
    const output = front + "-" + back;

    return output;
};

/**
 * @method
 * @name formatPhone
 * @description 문자열에 전화번호 형식 Formatter를 적용하여 반환한다.
 * @param {String} str 포멧터를 적용할 문자열
 * @returns {String} 포멧터가 적용된 문자열
 * @hidden N
 * @exception
 * @example
$c.str.formatPhone("0212345678");  // "02-1234-5678"
$c.str.formatPhone("05051234567"); // "0505-123-4567"
$c.str.formatPhone("03112345678"); // "031-1234-5678"
$c.str.formatPhone("0311234567");  // "031-123-4567"
 */
scwin.formatPhone = function (str) {
    if (typeof $p == 'string') {
        str = $p;
        return scwin.__formatPhone(str);
    } else {
        return scwin.__formatPhone(str);
    }
};

/**
 * @method
 * @name __formatPhone
 * @description 문자열에 전화번호 형식 Formatter를 적용, 반환
 * @param {string} str 전화번호 형식을 적용할 문자열
 * @returns {String} 전화번호 형식이 적용된 문자열
 * @hidden Y
 * @exception
 * @example
 */
scwin.__formatPhone = function (str) {
    try {
        str = str.replace(/\s+/g, "");
        const commCdList = ["0505"]; // 4자리 국번 ,예외가 되는 국번 확인
        const commCdNum = str.substr(0, 4); // 국번 4자리 확인
        if (commCdList.indexOf(commCdNum) > -1) { //국번이 0505 인경우
            return str.replace(/^(01[0136789]{1}|02|0[3-9]{1}[0-9]{1}[0-9]{1})-?([*0-9]{3,4})-?([0-9]{4})$/, "$1-$2-$3");
        } else if (str.length <= 11) {
            return str.replace(/^(01[0136789]{1}|02|0[3-9]{1}[0-9]{1})-?([*0-9]{3,4})-?([0-9]{4})$/, "$1-$2-$3");
        } else {
            return str;
        }
    } catch (ex) {
        console.error(ex);
    }
};

/**
 * @method
 * @name formatTime
 * @description 문자열에 시간 형식 Formatter를 적용하여 반환한다.
 * @param {String} str 포멧터를 적용할 문자열
 * @returns {String} 포멧터가 적용된 문자열
 * @hidden N
 * @exception
 * @example
$c.str.formatTime("123402"); // 12:34:02
$c.str.formatTime("1234"); // 12:34:02
 */
scwin.formatTime = function (str) {
    try {
        const hour = String(str).substr(0, 2);
        const minute = String(str).substr(2, 2);
        const second = String(str).substr(4, 2);
        if ($c.util.isEmpty(second)) {
            return hour + ":" + minute;
        } else {
            return hour + ":" + minute + ":" + second;
        }
    } catch (ex) {
        console.error(ex);
        return str;
    }
};

/**
 * @method
 * @name getLocale
 * @param {String} str 어떤 유형인지 리턴받을 문자
 * @returns {Number} 유니코드 기준
 * @description 문자(char)의 유형을 리턴한다.
 * 한글음절[ 44032 ~ 55203 ] => 1
 * 한글자모[ 4352 ~ 4601 ] => 2 
 * 숫자[ 48 ~ 57 ] => 4
 * 특수문자[ 32 ~ 47 || 58 ~ 64 || 91 ~ 96 || 123 ~ 126 ] => 8
 * 영문대[ 65 ~ 90 ] => 16
 * 영문소[ 97 ~ 122 ] => 32
 * 기타[그외 나머지] => 48
 * @hidden N
 * @exception
 * @example 
 * $c.str.getLocale("가"); // 1
 * $c.str.getLocale("ㅏ"); // 2
 * $c.str.getLocale("1");  // 4
 * $c.str.getLocale("!");  // 8
 * $c.str.getLocale("A");  // 16
 * $c.str.getLocale("a");  // 32
 * $c.str.getLocale("?");  // 48
 */
scwin.getLocale = function (str) {
    let locale = 0;
    if (str.length > 0) {
        const charCode = str.charCodeAt(0);

        if (charCode >= 0XAC00 && charCode <= 0XD7A3) { // 한글음절.[ 44032 ~ 55203 ]
            locale = 0X1; // 1
        } else if ((charCode >= 0X1100 && charCode <= 0X11F9) || (charCode >= 0X3131 && charCode <= 0X318E)) { // 한글자모.[ 4352 ~ 4601 ]
            locale = 0X2; // 2
        } else if (charCode >= 0X30 && charCode <= 0X39) { // 숫자.[ 48 ~ 57 ]
            locale = 0X4; // 4
        } else if ((charCode >= 0X20 && charCode <= 0X2F) || (charCode >= 0X3A && charCode <= 0X40) || (charCode >= 0X5B && charCode <= 0X60)
            || (charCode >= 0X7B && charCode <= 0X7E)) { // 특수문자
            locale = 0X8; // 8
        } else if (charCode >= 0X41 && charCode <= 0X5A) { // 영문 대.[ 65 ~ 90 ]
            locale = 0X10; // 16
        } else if (charCode >= 0X61 && charCode <= 0X7A) { // 영문 소.[ 97 ~ 122 ]
            locale = 0X20; // 32
        } else { // 기타
            locale = 0X30; // 48
        }
    }
    return locale;
};

/**
 * @method
 * @name existKorean
 * @description 입력받은 문자열에 한글이 포함되어 있는지 여부를 검사한다.
 * @param {String} value 한글 유형인지 검증할 문자열
 * @returns {Boolean} 한글포함여부
 * @example
$c.str.existKorean("abc"); // false
$c.str.existKorean("abc무궁화"); // true
$c.str.existKorean("무궁화꽃이"); // true
 * @hidden N
 * @exception 
 */
scwin.existKorean = function (value) {
    const check = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;
    if (check.test(value)) {
        return true;
    } else {
        return false;
    }
};

/**
 * @method
 * @name isKorean
 * @description 입력받은 문자열 전체가 한글인지를 검사한다.
 * @param {String} str 한글이 포함되어 있는지 검증 받을 문자열
 * @returns {Boolean} 검사결과
 * @example
$c.str.isKorean("abcd"); // false
$c.str.isKorean("abcd무궁화"); // false
$c.str.isKorean("무궁화"); // true
 * @hidden N
 * @exception 
 */
scwin.isKorean = function (str) {
    let result = false;

    for (let i = 0; i < str.length; i++) {
        let c = str.charAt(i);
        if (!$c.str.existKorean(c)) {
            result = false;
            break;
        } else {
            result = true;
        }

    }
    return result;
};

/**
 * @method
 * @name isFinalConsonant
 * @description 종성이 존재하는지 여부를 검사한다.
 * @param {String} str 종성의 여부를 검사할 문자열
 * @returns {Boolean} 검사결과
 * @example
$c.str.isFinalConsonant("종서")
// return 예시) false

$c.str.isFinalConsonant("종성")
// return 예시) true

$c.str.isFinalConsonant("입니다")
// return 예시) false

$c.str.isFinalConsonant("입니당")
// return 예시) true
 * @hidden N
 * @exception 
 */
scwin.isFinalConsonant = function (str) {
    let code = str.charCodeAt(str.length - 1);
    if ((code < 44032) || (code > 55197)) {
        return false;
    }
    if ((code - 16) % 28 == 0) {
        return false;
    }
    return true;
};

/**
 * @method
 * @name attachPostposition
 * @description 단어 뒤에 '은'이나 '는'을 붙여서 반환한다.
 * @param {String} str 은, 는 붙일 문자열
 * @returns {Boolean} 변환된 문자열
 * @hidden N
 * @exception 
 * @example
$c.str.attachPostposition("나");
// return 예시)"나는"

$c.str.attachPostposition("나와 너");
// return 예시)"나와 너는"

$c.str.attachPostposition("그래서");
// return 예시)"그래서는"

$c.str.attachPostposition("그랬습니다만");
// return 예시)"그랬습니다만은"
*/
scwin.attachPostposition = function (str) {
    if ($c.win.getLanguage() === "ko") {
        if ($c.str.isFinalConsonant(str)) {
            str = str + "은";
        } else {
            str = str + "는";
        }
        return str;
    } else {
        return str;
    }
};

/**
 * @method
 * @name isBizID
 * @description 사업자번호 유효성을 검사한다.
 * @param {String} str 사업자번호 문자열
 * @returns {Boolean} 검사결과 (정상이면 true, 비정상이면 false를 반환)
 * @hidden N
 * @exception 
 * @example
$c.str.isBizID("1102112345"); // false
$c.str.isBizID("1078616054"); // true
$c.str.isBizID("2208139938"); // true
$c.str.isBizID("1248100998"); // true
*/
scwin.isBizID = function (str) {
    let sum = 0;
    const aBizID = new Array(10);
    const checkID = new Array("1", "3", "7", "1", "3", "7", "1", "3", "5");

    for (let i = 0; i < 10; i++) {
        aBizID[i] = str.substring(i, i + 1);
    }

    for (let i = 0; i < 9; i++) {
        sum += aBizID[i] * checkID[i];
    }

    sum = sum + parseInt((aBizID[8] * 5) / 10);
    const temp = sum % 10;
    let temp1 = 0;

    if (temp != 0) {
        temp1 = 10 - temp;
    } else {
        temp1 = 0;
    }

    if (temp1 != aBizID[9]) {
        return false;
    }

    return true;
};

/**
 * @method
 * @name isSSN
 * @description 내외국인 주민등록번호 유효성을 검사한다.
 * @param {String} str 문자열
 * @returns {Boolean} 검사결과 (정상이면 true, 비정상이면 false를 반환)
 * @hidden N
 * @exception 
 * @example
$c.str.isSSN("9701011234567");
*/
scwin.isSSN = function (str) {
    const checkID = new Array(2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5);
    let i = 0, sum = 0;
    let temp = 0;
    let yy = "";

    if (str.length != 13) {
        return false;
    }

    for (i = 0; i < 13; i++) {
        if (str.charAt(i) < '0' || str.charAt(i) > '9') {
            return false;
        }
    }

    // foreigner PersonID Pass
    if (str.substring(6, 13) == "5000000" || str.substring(6, 13) == "6000000" || str.substring(6, 13) == "7000000"
        || str.substring(6, 13) == "8000000") {
        return true;
    }

    for (i = 0; i < 12; i++) {
        sum += str.charAt(i) * checkID[i];
    }

    temp = sum - Math.floor(sum / 11) * 11;
    temp = 11 - temp;
    temp = temp - Math.floor(temp / 10) * 10;

    // 나이 (-) 체크
    if (str.charAt(6) == '1' || str.charAt(6) == '2' || str.charAt(6) == '5' || str.charAt(6) == '6') {
        yy = "19";
    } else {
        yy = "20";
    }

    if (parseInt($c.date.getServerDateTime("yyyy")) - parseInt(yy + str.substring(0, 2)) < 0) {
        return false;
    }

    // 외국인 주민번호 체크로직 추가
    if (str.charAt(6) != '5' && str.charAt(6) != '6' && str.charAt(6) != '7' && str.charAt(6) != '8') {
        if (temp == $c.num.parseInt(str.charAt(12))) {
            return true;
        } else {
            return false;
        }
    } else {
        if ((temp + 2) % 10 == $c.num.parseInt(str.charAt(12))) {
            return true;
        } else {
            return false;
        }
    }

    return false;
};

/**
 * @method
 * @name isEmail
 * @description 이메일 주소의 유효성을 검사한다.
 * @param {String} str 메일주소
 * @returns {Boolean} 검사결과 (정상이면 true, 비정상이면 false를 반환)
 * @hidden N
 * @exception 
 * @example
$c.str.isEmail("emailTest@email.com");  // true
*/
scwin.isEmail = function (str) {
    if (typeof str != "undefined" && str != "") {
        const format = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

        if (format.test(str)) {
            return true;
        } else {
            return false;
        }
    }

    return true;
};

/**
 * @method
 * @name isPhone
 * @description 전화번호의 유효성을 검사한다.
 * @param {String} str :: I :: Y :: :: 전화번호
 * @returns {Boolean} 검사결과 (정상이면 true, 비정상이면 false를 반환)
 * @hidden N
 * @exception 
 * @example
$c.str.isPhone("01094832134"); // true
$c.str.isPhone("02094832134"); // false
*/
scwin.isPhone = function (str) {
    try {
        const phoneNum = $c.str.formatPhone(str);
        const isDash = (phoneNum.indexOf("-") > 1);
        return isDash;
    } catch (ex) {
        console.error(ex);
        return false;
    }
};


/**
 * @method
 * @name replaceAll
 * @description 문자열을 치환한다.
 * @param	{String} str 문자열
 * @param	{String} orgStr 검색할 문자
 * @param	{String} repStr 치환할 문자
 * @hidden N
 * @exception 
 * @returns {String} 치환문자열
 * @example $c.str.replaceAll(obj.getValue(), "/", "");
*/
scwin.replaceAll = function (str, orgStr, repStr) {
    try {
        str = "" + str;
        return str.split(orgStr).join(repStr);
    } catch (ex) {
        console.error(ex);
        return str;
    }
};

/**
 * @method
 * @name trim
 * @description 입력된 문자열의 좌우측 공백을 제거한 문자열을 구한다.
 * @param {String} str 좌우측 공백문자를 제거하려는 문자열
 * @returns {String} 입력된 문자열에서 좌우측 공백이 제거된 문자열
 * @hidden N
 * @exception 
 * @example $c.str.trim("   a   ");  // return "a"
*/
scwin.trim = function (str) {
    try {
        if (typeof str == "undefined" || str == null) {
            str = "";
        }
        if (typeof str !== "string") {
            str = str + "";
        }
        return str.trim();
    } catch (ex) {
        console.error(ex);
    }
};

/**
 * @method
 * @name getByteLength
 * @description 문자열의 바이트 기준 문자열 길이를 반환한다.
 * @param {String} str 문자열
 * @param {String} ignoreChar 길이 측정 시 무사할 문자열
 * @returns {Number} 문자열 길이
 * @hidden N
 * @exception 
 * @example
$c.str.getByteLength("1231aABC");  // 8
$c.str.getByteLength("1231a한글");  // 9
*/
scwin.getByteLength = function (str, ignoreChar) {
    return WebSquare.util.getStringByteSize(str, ignoreChar);
};


]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload"/>
</html>
