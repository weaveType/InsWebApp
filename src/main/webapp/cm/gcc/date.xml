<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenId="$c.date" meta_screenName="날짜 관련 함수" meta_screenDesc="날짜 관련 함수를 작성한다.">
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map">
			</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<w2:publicInfo method="scwin.addMinute,scwin.addHour,scwin.addDate,scwin.addMonth,scwin.getServerDateTime,scwin.formatDate,scwin.formatTime,scwin.formatDateTime,scwin.isDate,scwin.diffDate,scwin.isLeafYear,scwin.getDay,scwin.getLunar,scwin.getLastDateOfMonth"/>
		<script lazy="false" type="text/javascript"><![CDATA[
scwin.onpageload = function () {

};

/**
 * @method
 * @name addMinute
 * @description 입력된 날짜에 지정된 만큼의 분을 더한다.
 * @param {String} pYmd 날짜 형식의 문자열 (yyyyMMdd or yyyyMMddHHmmss)
 * @param {Number} offset 더할 분 수
 * @returns {String} 지정된 offset만큼의 날짜가 더해진 날짜
 * @hidden N
 * @exception 
 * @example 
$c.date.addMinute("201708191210", 10); // "201708191220"
$c.date.addMinute("201708191210", -10); // "201708191200"
 */
scwin.addMinute = function (pYmd, offset) {
    return WebSquare.date.dateTimeAdd(pYmd, offset, "minute");
};


/**
 * @method
 * @name addHour
 * @description 입력된 날짜에 지정된 만큼의 시간을 더한다.
 * @param {String} pYmd 날짜 형식의 문자열 (yyyyMMdd or yyyyMMddHHmmss)
 * @param {Number} offset 더할 시간 수.
 * @returns {String} 지정된 offset만큼의 날짜가 더해진 입력 날짜
 * @hidden N
 * @exception 
 * @example 
$c.date.addHour("2017081912", 10); // "2017081922"
$c.date.addHour("2017081912", -10); // "2017081902"
 */
scwin.addHour = function (pYmd, offset) {
    return WebSquare.date.dateTimeAdd(pYmd, offset, "hour");
};

/**
 * @method
 * @name addDate
 * @description 입력된 날짜에 지정된 만큼의 날을 더한다.
 * @param {String} pYmd 날짜 형식의 문자열 (yyyyMMdd or yyyyMMddHHmmss)
 * @param {Number} offset 더할 날짜 수.
 * @returns {String} 지정된 offset만큼의 날짜가 더해진 입력 날짜
 * @hidden N
 * @exception 
 * @example 
$c.date.addDate("20170819", 2); // "20170821"
$c.date.addDate("20170819", -10); // "20170809"
 */
scwin.addDate = function (pYmd, offset) {
    return WebSquare.date.dateAdd(pYmd, offset);
};

/**
 * @method
 * @name addMonth
 * @description 입력된 날짜에 지정된 만큼의 달을 더한다.
 * @param {String} pYmd 날짜 형식의 문자열 (yyyyMMdd or yyyyMMddHHmmss)
 * @param {Number} offset 더할 개월 수.
 * @returns {String} 지정된 offset만큼의 개월이 더해진 입력 날짜
 * @hidden N
 * @exception 
 * @example
$c.date.addMonth("20170819", 2); // "20171019"
$c.date.addMonth("20170819", -10); // "20161019"
 */
scwin.addMonth = function (pYmd, offset) {
    try {
        let date = "";
        const isDate = $c.date.isDate(pYmd);

        if (!isDate) {
            return;
        }
        if (typeof offset == "undefined" || isNaN(offset)) {
            offset = 0;
        }

        let dY = (pYmd + "").substring(0, 4);
        let dM = (pYmd + "").substring(4, 6);
        let dD = (pYmd + "").substring(6, 8);
        let dTime = (pYmd + "").substring(8);
        dM = (dM * 1) + (offset * 1);

        if (dM > 0) {
            dY = (dY * 1) + Math.floor(dM / 12);
            dM = dM % 12;
        } else {
            dY = (dY * 1) - Math.floor((dM * -1 + 12) / 12);
            dM = dM % 12 + 12;
        }

        if (Number(dD) >= 30) {
            const chkMonth1 = [2];
            const chkMonth2 = [4, 6, 9, 11];

            if (chkMonth1.indexOf(dM) > -1) {
                if ($c.date.isLeafYear(dY + "01" + "01")) {
                    dD = "29";
                } else {
                    dD = "28";
                }
            } else if (chkMonth2.indexOf(dM) > -1) {
                if (Number(dD) > 30) {
                    dD = "30";
                }
            }
        }
        const cDate = new Date(dY, dM - 1, dD);
        const cYear = cDate.getFullYear();
        let cMonth = cDate.getMonth() + 1;
        if ((cMonth + "").length < 2) {
            cMonth = "0" + cMonth;
        }
        const cDay = cDate.getDate();
        if ((cDay + "").length < 2) {
            cDay = "0" + cDay;
        }
        date = cYear + "" + cMonth + "" + cDay + "" + dTime;
        return date;
    } catch (ex) {
        console.error(ex);
    }
};


/**
 * @method
 * @name getServerDateTime
 * @description 서버 날짜 반환한다. (default format: yyyyMMdd)
 * @param {String:N} sDateFormat 날짜 포맷
 * y Year 1996; 96
 * M Month in year 07
 * d Day in month 10
 * H Hour in day (0-23) 0
 * m Minute in hour 30
 * s Second in minute 55
 * S Millisecond 978
 * @returns {String} 현재날짜
 * @hidden N
 * @exception 
 * @example
$c.date.getServerDateTime("yyyy-MM-dd HH:mm:ss SSS");
$c.date.getServerDateTime("yyyy-MM-dd");
$c.date.getServerDateTime();
 */
scwin.getServerDateTime = function (sDateFormat) {
    if ($c.util.isEmpty(sDateFormat)) {
        sDateFormat = "yyyyMMdd";
    }

    return WebSquare.date.getCurrentServerDate(sDateFormat);
};

/**
 * @method
 * @name formatDate
 * @description 문자열에 날짜 Formatter를 적용하여 반환한다.
 * @param {String} str 포멧터를 적용할 파라메터 (String 또는 Number 타입 지원)
 * @param {String} type 적용할 포멧터 형식 Default:null,slash,date
 * @returns {String} 포멧터가 적용된 문자열
 * @hidden N
 * @exception 
 * @example
$c.date.formatDate(20120319, "slash"); 
// return 예시) 12/03/19

$c.date.formatDate(20120319, "date");
// return 예시) 2012/03/19

$c.date.formatDate(20120319, "colon");
// return 예시) 2012:03:19

$c.date.formatDate(20120319);
// return 예시) 2012년 03월 19일
 */
scwin.formatDate = function (str, type) {
    if (typeof ($p) == 'string') {
        type = str;
        str = $p;
        return scwin.__formatDate(str, type);
    }
    return scwin.__formatDate(str, type);
};

/**
 * @method
 * @name __formatDate
 * @description $p를 파라미터로 전달하지 않는 formatDate 함수
 * @param {String} str 날짜데이터
 * @param {String} type 날짜 데이터 포맷
 * @returns {String} 
 * @hidden Y
 * @exception
 * @example
 */
scwin.__formatDate = function (str, type) {
    let output = "";
    let date = new String(str);

    if (type == "slash") {
        date = date.substring(2, date.length);
        for (let i = 0; i <= date.length - 1; i++) {
            output = output + date[i];
            if ((i + 1) % 2 == 0 && (date.length - 1) !== i)
                output = output + "/";
        }
    } else if (type == "date") {
        if (date.length == 8) {
            output = date.substr(0, 4) + "/" + date.substr(4, 2) + "/" + date.substr(6, 2);
        }
    } else if (type == "colon") {
        if (date.length == 8) {
            output = date.substr(0, 4) + ":" + date.substr(4, 2) + ":" + date.substr(6, 2);
        }
    } else if (!$c.util.isEmpty(type)) {
        if (date.length == 8) {
            output = date.substr(0, 4) + type + date.substr(4, 2) + type + date.substr(6, 2);
        }
    } else {
        const year = date.substr(0, 4);
        const month = date.substr(4, 2);
        const day = date.substr(6, 2);
        output = year + "년 " + month + "월 " + day + "일";
    }

    return output;
};


/**
 * @method
 * @name formatTime
 * @description 시간 - 입력된 String 또는 Number에 포메터를 적용하여 반환한다.
 * @param {String} value 시간 Formatter를 적용한 값 (String 또는 Number 타입 지원)
 * @returns {String} 포멧터가 적용된 문자열
 * @hidden N
 * @exception 
 * @example
$c.date.formatTime("123402");
// return 예시) "12:34:02"
 */
scwin.formatTime = function (value) {
    const hour = String(value).substr(0, 2);
    const minute = String(value).substr(2, 2);
    const second = String(value).substr(4, 2);
    const output = hour + ":" + minute + ":" + second;

    return output;
};


/**
 * @method
 * @name formatDateTime
 * @description 날짜 객체에 포매팅을 적용한다. (default format: yyyyMMdd)
 * @param {Date} value 날짜 포맷팅을 적용할 날짜 객체
 * @param {String:N} sDateFormat 날짜 포맷
 * y Year 1996; 96
 * M Month in year 07
 * d Day in month 10
 * H Hour in day (0-23) 0
 * m Minute in hour 30
 * s Second in minute 55
 * S Millisecond 978
 * @returns {String} 현재날짜
 * @hidden N
 * @exception 
 * @example
$c.date.formatDateTime(new Date());  // "20190822"
$c.date.formatDateTime(new Date(), "yyyy-MM-dd HH:mm:ss SSS");  // "2019-08-22 15:55:35 705"
 */
scwin.formatDateTime = function (value, sDateFormat) {
    if ($c.util.isEmpty(sDateFormat)) {
        sDateFormat = "yyyyMMdd";
    }

    return WebSquare.date.getFormattedDate(value, sDateFormat);
};

/**
 * @method
 * @name isDate
 * @description 입력된 값이 Date 형식의 값인지 확인한다.
 * @param {String|number} sDate 날짜 문자열 (yyyyMMdd or yyyyMMddHHmmss)
 * @param {Boolean} timeChk 시간체크. (true/false)
 * @returns {Boolean} Date 형식에 일치하면 true, 아니면 false
 * @hidden N
 * @exception 
 * @example
$c.date.isDate("20170819"); // return true
 */
scwin.isDate = function (sDate, timeChk) {
    let flag = true;
    try {
        if (sDate.length == 8) {
            sDate = sDate + "000000";
        }

        const y1 = parseInt(sDate.substring(0, 4), 10);
        const m1 = parseInt(sDate.substring(4, 6), 10);
        const d1 = parseInt(sDate.substring(6, 8), 10);
        const h1 = parseInt(sDate.substring(8, 10), 10);
        const t1 = parseInt(sDate.substring(10, 12), 10);
        const s1 = parseInt(sDate.substring(12), 10);
        if (isNaN(y1) || isNaN(m1) || isNaN(d1) || isNaN(h1) || isNaN(t1) || isNaN(s1))
            flag = false;

        if (m1 < 1 || m1 > 12)
            flag = false;

        let maxDay = 31;
        if (m1 == 2) {
            maxDay = ((y1 % 400 == 0) || ((y1 % 4 == 0) && (y1 % 100 != 0))) ? 29
                : 28;
        } else if (m1 == 4 || m1 == 6 || m1 == 9 || m1 == 11) {
            maxDay = 30;
        }

        if (d1 < 1 || d1 > maxDay) {
            flag = false;
        }

        if (h1 + t1 + s1 != "") {
            if (h1 < 0 || h1 > 24) {
                flag = false;
            } else if (h1 == 24) {
                if (typeof timeChk == "boolean" && !timeChk)
                    flag = false;
                if (t1 > 0)
                    flag = false;
                if (s1 > 0)
                    flag = false;
            }
            if (t1 < 0 || t1 > 59)
                flag = false;
            if (s1 < 0 || s1 > 59)
                flag = false;
        }
    } catch (ex) {
        console.error(ex);
        flag = false;
    }
    return flag;
};

/**
 * @method
 * @name diffDate
 * @description fromDate, toDate 를 입력받아 두 날짜의 차이를 반환한다.
 * @param {String} fromDate 시작일자 (date형식은 yyyyMMdd or yyyyMMddHHmmss)
 * @param {String} toDate 종료일자 (date형식은 yyyyMMdd or yyyyMMddHHmmss)
 * @returns {Number} 종료일자에서 시작일자의 날짜 차이 수.
 * @hidden N
 * @exception 
 * @example
$c.date.diffDate("20170821", "20180621"); // 304
 */
scwin.diffDate = function (fromDate, toDate) {
    try {
        if (!$c.date.isDate(fromDate) || !$c.date.isDate(toDate)) {
            return;
        }
        const diffDate = WebSquare.date.dateDiff(fromDate, toDate);
        return diffDate;
    } catch (ex) {
        console.error(ex);
    }
};

/**
 * @method
 * @name isLeafYear
 * @description 입력된 양력의 날짜가 윤년인지 검사한다.
 * @param {String} pYmd :: I :: Y ::  :: 윤달 확인 날짜.
 * @returns {Boolean} 윤달 유무( true : 윤달 )
 * @hidden N
 * @exception 
 * @example
$c.date.isLeafYear("20201212");  // return true
 */
scwin.isLeafYear = function (pYmd) {
    try {
        let isLeafYear = false;
        if (!$c.date.isDate(pYmd)) {
            return;
        } else {
            pYmd = pYmd.substr(0, 8);
            const y1 = parseInt(pYmd.substr(0, 4), 10);
            isLeafYear = ((y1 % 400 == 0) || ((y1 % 4 == 0) && (y1 % 100 != 0))) ? true : false;
        }
        return isLeafYear;
    } catch (ex) {
        console.error(ex);
    }
};

/**
 * @method
 * @name getDay
 * @description 특정 날짜의 요일을 반환한다.
 * @param {String} value "yyyyMMdd" 포맷 형태의 날짜를 나타내는 문자열 ("20190801")
 * @param {String} type 반환형식 기본값은 날짜를 한글로 반환 , num 인경우 숫자로 반환 일요일 :  1 ~ 토요일 : 7
 * @returns {String} 요일
 * @hidden N
 * @exception 
 * @example
$c.date.getDay("20190822");  // "목요일"
$c.date.getDay("20190824");  // "토요일"
 */
scwin.getDay = function (value, type) {
    let dayVal;
    if (type == "num") {
        dayVal = WebSquare.date._getDay(value);
        if (dayVal == 0) {
            return "7";
        } else {
            return String(dayVal);
        }
    } else {
        return WebSquare.date.getDay(value);
    }
};

/**
 * @method
 * @name getLunar
 * @description 특정 날짜의 음력 날짜를 반환한다.
 * @param {String} value "yyyyMMdd" 포맷 형태의 날짜를 나타내는 문자열
 * @returns {String} 음력 날짜
 * @hidden N
 * @exception 
 * @example
$c.date.getLunar("20190824");  // "20190724"
 */
scwin.getLunar = function (value) {
    return WebSquare.date.toLunar(value);
};

/**
 * @method
 * @name getLastDateOfMonth
 * @description 해당 월의 마지막 날짜를 반환한다.
 * @param {String} yearMonth 년월 문자열 (yyyyMM)
 * @returns 마지막 날짜
 * @hidden N
 * @exception 
 * @example
$c.date.getLastDateOfMonth("201510");  // 31
 */
scwin.getLastDateOfMonth = function (yearMonth) {
    try {
        if (typeof yearMonth !== "string") {
            yearMonth = $c.str.serialize(yearMonth);
        }

        const year = yearMonth.substring(0, 4);
        const month = yearMonth.substring(4, 6);

        return (new Date(year, month, 0)).getDate();
    } catch (ex) {
        console.error(ex);
        return null;
    }
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload"/>
</html>
