<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ev="http://www.w3.org/2001/xml-events"
	xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenName="유틸리티 함수" meta_screenId="$c.util" meta_screenDesc="웹스퀘어 컴포넌트 제어, 엑셀 파일 업로드/다운로드, 파일 업로드/다운로드, 기타 를 작성한다.">
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map"/>
			<w2:workflowCollection/>
		</xf:model>
		<w2:layoutInfo/>
		<w2:publicInfo method="scwin.getUserAgent,scwin.getParameter,scwin.getObject,scwin.getFunction,scwin.getCallBackFunction,scwin.getJSON,scwin.isJSON,scwin.isArray,scwin.isEmpty,scwin.getObjectType,scwin.isPlainObject,scwin.isMobile,scwin.isXmlDoc,scwin.setGridViewDelCheckBox,scwin.getChildren,scwin.getGridViewDataList,scwin.getComponent,scwin.createComponent,scwin.setInterval,scwin.clearInterval,scwin.setTimeout,scwin.clearTimeout,scwin.copyClipboard"/>
		<script lazy="false" type="text/javascript"><![CDATA[// =============================================================================
/**
 * 웹스퀘어 컴포넌트 제어, 엑셀 파일 업로드/다운로드, 파일 업로드/다운로드, 기타 유틸리티 함수를 작성한다.
 *
 * @author Inswave Systems
 * @class util
 * @namespace $c.util
 */
// =============================================================================

scwin.onpageload = function () {

};

/**
 * @method 
 * @name getUserAgent
 * @description 접속한 사용자의 웹 브라우저 종류를 반환한다.
 * @returns {String} 웹 브라우저 종류
 * @hidden N
 * @exception 
 * @example
const userAgent = $c.util.getUserAgent();
 */
scwin.getUserAgent = function () {
    return scwin.__getUserAgent();
};

/**
 * @method
 * @name __getUserAgent
 * @description 접속한 사용자의 웹 브라우저 정보를 반환한다
 * @param
 * @returns {string} 사용자의 웹 브라우저 정보
 * @hidden Y
 * @exception
 * @example
 */
scwin.__getUserAgent = function () {
    try {
        const agt = navigator.userAgent.toLowerCase();

        if (agt.indexOf("edg") != -1) {
            return 'Edge';
        } else if (agt.indexOf("chrome") != -1) {
            return 'Chrome';
        } else if (agt.indexOf("opera") != -1) {
            return 'Opera';
        } else if (agt.indexOf("staroffice") != -1) {
            return 'Star Office';
        } else if (agt.indexOf("webtv") != -1) {
            return 'WebTV';
        } else if (agt.indexOf("beonex") != -1) {
            return 'Beonex';
        } else if (agt.indexOf("chimera") != -1) {
            return 'Chimera';
        } else if (agt.indexOf("netpositive") != -1) {
            return 'NetPositive';
        } else if (agt.indexOf("phoenix") != -1) {
            return 'Phoenix';
        } else if (agt.indexOf("firefox") != -1) {
            return 'Firefox';
        } else if (agt.indexOf("safari") != -1) {
            return 'Safari';
        } else if (agt.indexOf("skipstone") != -1) {
            return 'SkipStone';
        } else if (agt.indexOf("msie") != -1 || agt.indexOf("trident") != -1) {
            return 'msie';
        } else if (agt.indexOf("netscape") != -1) {
            return 'Netscape';
        } else if (agt.indexOf("mozilla/5.0") != -1) {
            return 'Mozilla';
        } else {
            return '';
        }
    } catch (ex) {
        return '';
    }
};

/**
 * @method 
 * @name getParameter
 * @description GET 방식으로 전달한 파라미터를 읽어 온다.
 * @param {String} param 파라미터 키
 * @param {String} url URL
 * @returns {Object} 파라미터 값
 * @hidden N
 * @exception 
 * @example
const codeValue = $c.util.getParameter("code");  // 특정 파라미터 값을 얻어오기
 */
scwin.getParameter = function (param, url) {
    if ($c.util.isEmpty(url)) {
        url = unescape(location.href);
    }
    const paramArr = (url.substring(url.indexOf("?") + 1, url.length)).split("&");
    let value = "";

    for (let i = 0; i < paramArr.length; i++) {
        let temp = paramArr[i].split("=");

        if (temp[0].toUpperCase() == param.toUpperCase()) {
            value = paramArr[i].split("=")[1];
            break;
        }
    }

    return value;
};

/**
 * @method 
 * @name getObject
 * @description 객체 아이디로 객체 찾아서 반환한다.
 * @param {String} _objectId 객체 ID
 * @param {String} _scopeObj 객체 적용 Scope ID ["parent" 최상위 예외 scope ID 적용]
 * @returns {Object} 찾은 객체
 * @hidden N
 * @exception 
 * @example
const scwinObj = $c.util.getObject("scwin");
const wfmHeader = $c.util.getObject("wfm_header", "top");
const wfmHeader = $c.util.getObject("wfm_header", "parent");
const btnToggleMenu = $c.util.getObject("btn_toggle_menu", "wfm_header");
const thisObj = $c.util.getObject(this);
 */
scwin.getObject = function (_objectId, _scopeObj) {
    if ((typeof _objectId === "object") && (!$c.util.isEmpty(_objectId.event))) {
        return $c.util.getComponent($p.getEventTarget(_objectId.realId));
    } else {
        let scopeObj = _scopeObj || "";
        const topFrameId = $p.main().$p.getFrameId();

        if (scopeObj == "parent") {
            scopeObj = $p.parent().$p;
        } else if (scopeObj == "top") {
            scopeObj = $p.main().$p;
        } else if (scopeObj == "") {
            scopeObj = $p;
        } else {
            // scopeObj를 계속 String com값으로 인식해서 수정. 
            // var isComp = WebSquare.util.getComponentById(topFrameId + "_" + scopeObj);
            let isComp = $p.getFrame();
            if (isComp) {
                scopeObj = isComp.getWindow().$p;
            }
        }

        const objectId = _objectId || "";
        let objectComp;

        try {
            if (objectId != "" && scopeObj && scopeObj.id && scopeObj.id.indexOf(topFrameId) == 0) {
                objectComp = scopeObj.getComponentById(objectId);
            } else if (objectId != "" && objectId.indexOf(topFrameId) == 0) {
                objectComp = WebSquare.util.getComponentById(objectId);
            }

            if ($c.util.isEmpty(objectComp)) {
                objectComp = window[scopeObj.id + objectId];
            }
        } catch (ex) {
            console.error(ex);
        }
        return objectComp;
    }
};


/**
 * @method 
 * @name getFunction
 * @description 함수명을 통해 함수 객체를 찾아서 반환한다.
 * @param {String} _funcStr 함수명
 * @param {String} _scopeId 함수 존재 scopeId [default: 현재 호출 scopeId (페이지)]
 * @returns {Function} 특정 함수명의 함수객체
 * @hidden N
 * @exception 
 * @example
$c.util.getFunction("scwin.btn_logout_onclick");
$c.util.getFunction("scwin.initMainLoad", "top");
$c.util.getFunction("scwin.initMainLoad", "parent");
$c.util.getFunction("scwin.toggleMenu", "wfm_header");
 */
scwin.getFunction = function (_funcStr, _scopeId) {
    try {
        let fun;
        if (typeof _funcStr == "undefined") {
            return;
        } else {
            if (typeof _funcStr == "string") {
                const funcArr = _funcStr.split(".");
                const funcCnt = funcArr.length;
                let frameWin;
                if (!$c.util.isEmpty(_scopeId)) {
                    if (_scopeId == "top") {
                        frameWin = $p.main();
                    } else if (_scopeId == "parent") {
                        frameWin = $p.parent();
                    } else {
                        let findObj = $c.util.getObject(_scopeId, "top");
                        if (findObj && typeof findObj.getWindow == "function") {
                            frameWin = findObj.getWindow();
                        } else {
                            return;
                        }
                    }
                } else {
                    frameWin = $p.getFrame().getWindow();
                }

                let targetObj = frameWin;
                while (funcCnt > 0) {
                    let funcStr = funcArr[funcArr.length - funcCnt];
                    let findFunc = targetObj[funcStr];
                    if (typeof findFunc == "undefined") {
                        break;
                    } else {
                        fun = findFunc;
                        targetObj = fun;
                        funcCnt--;
                    }
                }

                if (typeof fun == "function") {
                    return fun;
                }
            } else if (typeof _funcStr == "function") {
                return _funcStr;
            }
        }
    } catch (ex) {
        console.error(ex);
    }
};

/**
 * @method 
 * @name getCallBackFunction
 * @description 콜백 함수명을 통해 함수 객체를 찾아서 반환한다.
 * @param {String} callbackFnStr 함수명
 * @returns {Function} 특정 함수명의 함수객체
 * @hidden N
 * @exception 
 * @example
 */
scwin.getCallBackFunction = function (callbackFnStr) {
    if (!$c.util.isEmpty(callbackFnStr)) {
        let func;
        const funcManager = $c.win.getCbFunctionManager()
        if (callbackFnStr.indexOf("__close_callback_Func__") > -1) {
            func = funcManager["cbFuncSave"][callbackFnStr];
            delete funcManager["cbFuncSave"][callbackFnStr];
            return func;
        } else {
            func = window.WebSquare.util.getGlobalFunction(callbackFnStr);
            return func;
        }
    }
};

/**
 * @method 
 * @name getJSON
 * @description JSON Object로 변환해서 반환한다.
 * @param {String|XML} value JSON 문자열 또는 XML Document
 * @returns {Object} JSON 객체
 * @hidden N
 * @exception 
 * @example
// 유효하지 않은 JSON 문자열 일 경우
$c.util.getJSON("");
// return 예시)	null

// 유효한 JSON 문자열
const json = '{"tbx_sPrjNm":"1","tbx_sPrtLv":"2","tbx_sReqLv":"3"}';
$c.util.getJSON(json);
// return 예시)	{tbx_sPrjNm: "1", tbx_sPrtLv: "2", tbx_sReqLv: "3"}
 */
scwin.getJSON = function (value) {
    try {
        if ($c.util.isXmlDoc(value) === true) {
            return JSON.parse(WebSquare.json.XML2JSONString(value));
        } else {
            return JSON.parse(value);
        }
    } catch (ex) {
        return value;
    }
};

/**
 * @method 
 * @name isJSON
 * @description JSON Object인지 여부를 검사한다.
 * @param {Object} json JSON Object가 맞는지 검사할 JSON Object
 * @returns {Boolean} 검사결과
 * @hidden N
 * @exception 
 * @example
$c.util.isJSON("123");
// return 예시) false
$c.util.isJSON([1,2,3]);
// return 예시) false
$c.util.isJSON([{"name" : "홍길동"}, {"name" : "허균"}]);
// return 예시) true
$c.util.isJSON( {"tbx_sPrjNm": "1", "tbx_sPrtLv": "2", "tbx_sReqLv": "3"} );
// return 예시) true
 */
scwin.isJSON = function (json) {
    try {
        if (typeof json === "object") {
            try {
                if ($c.util.isArray(json)) {
                    if ($c.util.isPlainObject(json[0])) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if ($c.util.isPlainObject(json)) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } catch (ex) {
                return false;
            }
        } else if ((typeof json === "string") && $c.util.isPlainObject(json)) {
            try {
                const jsonObj = JSON.parse(json);
                if ($c.util.isArray(jsonObj)) {
                    if ($c.util.isPlainObject(jsonObj[0])) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            } catch (ex) {
                console.error(ex);
                return false;
            }
        }
        return false;
    } catch (ex) {
        console.error(ex);
        return false;
    }
};

/**
 * @method 
 * @name isArray
 * @description 배열 객체인지 여부를 확인한다.
 * @param {Object} array :: I :: N :: :: Array Object or String
 * @returns {Boolean} Array 배열 판단 여부(Array 객체인 경우 true, 아닌경우 false)
 * @hidden N
 * @exception 
 * @example
$c.util.isArray(arrObject); // return true
 */
scwin.isArray = function (array) {
    try {
        if ((typeof array !== "undefined") && (array !== null) && (typeof array == "object")) {
            if (array.constructor.name && array.constructor.name.toLowerCase() == "array")
                return true;
            if (array.constructor && array.constructor == Array)
                return true;
        }
        return false;
    } catch (ex) {
        console.error(ex);
        return false;
    }
};


/**
 * @method 
 * @name isEmpty
 * @description 값이 Empty 상태(undefined, null, "")인지 판별한다.
 * @param {Object} value Empty 여부를 판단할 값
 * @returns {Boolean} Empty 여부 (true : Empty, false : Not Empty)
 * @hidden N
 * @exception 
 * @example
if ($c.util.isEmpty(empCd) === false) {
    console.log("empCd : " + empCd);
}
 */
scwin.isEmpty = function (value) {
    if (value == null || typeof value == "undefined")
        return true;
    if (typeof value === 'number' || typeof value === 'boolean')
        return false;
    if (value === '')
        return true;
    if (WebSquare.util.isArray(value) && value.length == 0)
        return true;
    if (value == "{}")
        return true;

    return WebSquare.util.isEmptyObject(value);
};

/**
 * @method 
 * @name getObjectType
 * @description 객체의 typeof 값을 반환하며 typeof의 값이 object인 경우 array, json, xml, null로 체크하여 반환한다.
 * @param {Object} obj type을 반환 받을 객체(string,boolean,number,object 등)
 * @returns {String} 객체의 타입으로 typeof가 object인 경우 arraym, json, xml, null로 세분화하여 반환한다. 그외 object타입이 아닌 경우 원래의 type(stirng,boolean,number 등)을 반환한다.
 * @hidden N
 * @exception 
 * @example
 $c.util.getObjectType("WebSquare");
 // return 예시) "string"

 $c.util.getObjectType({"name":"WebSquare"});
 // return 예시) "json"

 $c.util.getObjectType(["1","2"]);
 // return 예시) "array"
 */
scwin.getObjectType = function (obj) {
    const objType = typeof obj;
    if (objType !== "object") {
        return objType;
    } else if ($c.util.isArray(obj)) {
        return "array";
    } else if ($c.util.isJSON(obj)) {
        return "json";
    } else if (objType === "object" && ($c.util.isJSON(obj) === false)) {
        return "object";
    } else if (obj === null) {
        return "null";
    } else {
        const tmpDoc = WebSquare.xml.parse("<data></data>");
        if (obj.constructor === tmpDoc.constructor || obj.constructor === tmpDoc.childNodes[0].constructor) {
            return "xml";
        } else {
            return objType;
        }
    }
};

/**
 * @method 
 * @name isPlainObject
 * @description 값이 Plain Object인지 검사한다.
 * @param {Object} obj Plain Object인지 검사할 값
 * @returns {Boolean} Plain 객체 여부
 * @hidden N
 * @exception 
 * @example
$c.util.isPlainObject(1); // false
$c.util.isPlainObject("name"); // false
$c.util.isPlainObject([1,2,3]); // false
$c.util.isPlainObject({}); // true
$c.util.isPlainObject({ "name" : "홍길동"}); // true
$c.util.isPlainObject([{ "name" : "홍길동"}]); // false
 */
scwin.isPlainObject = function (obj) {
    let consObj, protObj;

    if (Object.prototype.toString.call(obj) !== '[object Object]') return false;

    consObj = obj.constructor;
    if (consObj === undefined) return true;

    protObj = consObj.prototype;
    if (Object.prototype.toString.call(protObj) !== '[object Object]') return false;

    if (protObj.hasOwnProperty('isPrototypeOf') === false) {
        return false;
    }

    return true;
};

/**
 * @method 
 * @name isMobile
 * @description 현재 클라이언트 브라우저 환경의 모바일 여부를 반환한다.
 * @hidden N
 * @exception 
 * @example
 */
scwin.isMobile = function () {
    return WebSquare.util.isMobile();
};


/**
 * @method 
 * @name isXmlDoc
 * @description XML Document 객체인지 여부를 검사한다.
 * @param {Object} data XML Document 객체인지 여부를 검사한다.
 * @returns {Boolean} 검사결과
 * @hidden N
 * @exception 
 * @example
 */
scwin.isXmlDoc = function (data) {
    if (typeof data != 'object')
        return false;

    if ((typeof data.documentElement != 'undefined' && data.nodeType == 9)
        || (typeof data.documentElement == 'undefined' && data.nodeType == 1)) {
        return true;
    }

    return false;
};

/**
 * @method 
 * @name setGridViewDelCheckBox
 * @description 
 * GridView Row 삭제를 위한 CheckBox 동작을 세팅한다.
 * GridView에 삭제용 CheckBox가 있을 경우 onPageLoad 이벤트에서 $c.util.setGridViewDelCheckBox 함수를 호출한다.
 * 이 함수가 정상 동작하려면 GridView의 Delete 처리용 CheckBox의 ColumnId와 Header Id를 "chk"로 설정해야 한다.
 * 
 * @param {Array} gridViewObjArr GridView 객체 배열
 * @hidden N
 * @exception 
 * @example
$c.util.setGridViewDelCheckBox(grd_OrganizationBasic);
$c.util.setGridViewDelCheckBox([grd_Menu, grd_MenuAccess]);
 */
scwin.setGridViewDelCheckBox = function (gridViewObjArr) {
    try {
        if ($c.util.getObjectType(gridViewObjArr) === "array") {
            for (let idx in gridViewObjArr) {
                setGridViewDelCheckBox(gridViewObjArr[idx]);
            }
        } else {
            setGridViewDelCheckBox(gridViewObjArr);
        }

        function setGridViewDelCheckBox(gridViewObj) {
            gridViewObj.bind("oncellclick",
                function (row, col) {
                    const columnId = gridViewObj.getColumnID(col);
                    if (columnId == "chk") {
                        const dltObj = $c.util.getGridViewDataList(this);
                        let realRowIndex = this.getRealRowIndex(row);

                        if (dltObj.getFilterList().length > 0) {
                            realRowIndex = dltObj.getFilteredRowIndex(realRowIndex);
                        }
                        const newValue = dltObj.getCellData(realRowIndex, columnId);
                        scwin._setGridViewRowCheckBox(this, realRowIndex, newValue === "1" ? true : false);
                    }
                }
            );
            gridViewObj.bind("onheaderclick",
                function (headerId) {
                    if (headerId == "chk") {
                        const newValue = this.getHeaderValue(headerId);
                        const dltObj = $c.util.getGridViewDataList(this);
                        const rowCount = dltObj.getRowCount();
                        let removeIdx = [];
                        let deleteIdx = [];
                        let undoIdx = [];
                        for (let i = 0; i < rowCount; i++) {
                            let realRowIndex = dltObj.getRealRowIndex(i);

                            if (dltObj.getFilterList().length > 0) {
                                realRowIndex = dltObj.getFilteredRowIndex(realRowIndex);
                            }

                            if (dltObj.getRowStatus(realRowIndex) == "C") {
                                removeIdx.push(realRowIndex);
                                continue;
                            }

                            if (newValue) {
                                deleteIdx.push(realRowIndex);
                            } else {
                                undoIdx.push(realRowIndex)
                            }
                        }

                        if (newValue) {
                            dltObj.deleteRows(deleteIdx);
                            dltObj.removeRows(removeIdx);
                        } else {
                            dltObj.undeleteRows(undoIdx);
                        }

                    }
                }
            );
        }
    } catch (ex) {
        console.error(ex);
    }
};

/**
 * @method 
 * @name _setGridViewRowCheckBox
 * @description 
 * @param {Object} gridViewObj 그리드뷰 객체
 * @param {Number} rowIndex rowIndex 값
 * @param {String} newValue set할 값.
 * @hidden Y
 * @exception 
 * @example
 */
scwin._setGridViewRowCheckBox = function (gridViewObj, rowIndex, newValue) {
    const rowIndexArr = gridViewObj.getChildrenRowIndexArray(rowIndex);
    const dltObj = $c.util.getGridViewDataList(gridViewObj);

    for (let idx in rowIndexArr) {
        let childRowIndexArr = gridViewObj.getChildrenRowIndexArray(rowIndexArr[idx]);

        if (childRowIndexArr.length > 0) {
            scwin._setGridViewRowCheckBox(gridViewObj, rowIndexArr[idx], newValue);
        } else {
            scwin._deleteGridViewRow(gridViewObj, rowIndexArr[idx], newValue);
        }
    }

    scwin._deleteGridViewRow(gridViewObj, rowIndex, newValue);
};

/**
 * @method 
 * @name _deleteGridViewRow
 * @description 
 * @param {Object} gridViewObj 그리드뷰 객체
 * @param {Number} rowIndex rowIndex 값
 * @param {String} newValue 
 * @hidden Y
 * @exception 
 * @example
 */
scwin._deleteGridViewRow = function (gridViewObj, rowIndex, newValue) {
    gridViewObj.setCellChecked(rowIndex, "chk", newValue);
    let dltObj = $c.util.getGridViewDataList(gridViewObj);

    if (newValue) {
        let rowStatus = dltObj.getRowStatus(rowIndex);
        if (rowStatus == "C") {
            dltObj.deleteRow(rowIndex);
            dltObj.removeRow(rowIndex);
        } else {
            dltObj.deleteRow(rowIndex);
        }
    } else {
        dltObj.undeleteRow(rowIndex);
    }
}


/**
 * @method 
 * @name getChildren
 * @description 특정 컴포넌트의 자식 컴포넌트를 배열로 반환한다.
 * @param {Object} comObj 컴포넌트 객체
 * @param {Object} options 하위 컴포넌트 검색 옵션 정보
 * @param {String} options.excludeId 제외할 컴포넌트 id. 인자가 여러개일 경우 공백을 구분자로 사용
 * @param {String} options.excludePlugin 제외할 컴포넌트 plugin 이름. 인자가 여러개일 경우 공백을 구분자로 사용.
 * @param {String} options.includePlugin 포함 컴포넌트 플러그인 이름. 인자가 여러 개일 경우 공백을 구분자로 사용함.
 * @hidden N
 * @exception 
 * @example
$c.util.getChildren(grp_content);
$c.util.getChildren(grp_content, {excludePlugin : "trigger input", excludeId : "treeview1_tooltip windowContainer1_tooltip");
$c.util.getChildren(grp_content, {excludeId : "ibx_name sbx_payTy"});
$c.util.getChildren(grp_content, {includePlugin : "selectbox"});
$c.util.getChildren(grp_content, {excludeId : "ibx_name sbx_payTy", includePlugin : "input selectbox"});
 */
scwin.getChildren = function (comObj, options) {
    return WebSquare.util.getChildren(comObj, options);
};

/**
 * @method 
 * @name getGridViewDataList
 * @description GridView와 바인딩된 DataList 객체를 반환한다.
 * @param {Object} gridViewObj 바인딩 된 DataList가 존재하는지 검증할 GridView 객체
 * @returns {Object} DataList객체 바인딩 된 DataList 객체 반환 (바인딩된 객체가 없을 경우 null 반환)
 * @hidden N
 * @exception 
 * @example
// 바인딩 되어있는 경우
$c.util.getGridViewDataList(grd_First);
// return 예시) "dlt_first"

// 바인딩 되어있지 않은 경우
$c.util.getGridViewDataList(grd_First);
// return 예시) undefined
 */
scwin.getGridViewDataList = function (gridViewObj) {
    const dataListId = gridViewObj.getDataList();

    if (dataListId !== "") {
        let dataList = $p.getComponentById(dataListId);
        if ((typeof dataList === "undefined") || (dataList === null)) {
            console.warn("[$c.util.getGridViewDataList] DataList(" + dataListId + ")를 찾을 수 없습니다.");
            return null;
        } else {
            return dataList;
        }
    } else {
        console.warn("[$c.util.getGridViewDataList] " + gridViewObj.getID() + "는 DataList가 세팅되어 있지 않습니다.");
        return null;
    }
};

/**
 * @method 
 * @name getComponent
 * @description 주어진 아이디에 해당하는 웹스퀘어 컴포넌트를 찾아 반환한다.
 * @param {String} compId 컴포넌트 아이디
 * @returns {Object} DataList객체 바인딩 된 DataList 객체 반환 (바인된 객체가 없을 경우 null 반환)
 * @hidden N
 * @exception 
 * @example
const object = $c.util.getGridViewDataList(compId);
 */
scwin.getComponent = function (compId) {
    const object = $p.getComponentById(compId);
    if (typeof object === "undefined") {
        return null;
    } else {
        return object;
    }
};

/**
 * @method 
 * @name createComponent
 * @description 주어진 인자를 통해 동적으로 Component를 생성합니다.
 * @param {String} strCompId 컴포넌트 ID
 * @param {String} strCompName 컴포넌트 태그명
 * @param {Object} option 컴포넌트 옵션
 * @param {String} parent 컴포넌트 생성 부모 노드 위치
 * @param {Object} itemSet 컴포넌트 setItemset 옵션
 * @returns {Object} 생성된 컴포넌트 객체
 * @hidden N
 * @exception 
 * @example
$c.util.createComponent("ibx_input1", "input" );
$c.util.createComponent("ibx_input2", "input", { style: "width:120px; height:40px; float:left; margin : 20px;" });
$c.util.createComponent("ibx_input2", "input", { style: "width:120px; height:40px; float:left; margin : 20px;" }, grp_content1);
 */
scwin.createComponent = function (strCompId, strCompName, option, parent, itemSet) {
    try {
        if ((typeof strCompId !== "undefined") && (strCompId !== "") && (typeof strCompName !== "undefined") && (strCompName !== "")) {

            if (typeof option == "undefined") {
                option = {};
            }

            if (typeof parent == "undefined") {
                parent = "";
            }

            if (typeof itemSet == "undefined") {
                itemSet = "";
            }

            return $p.dynamicCreate(strCompId, strCompName, option, parent, itemSet);
        }
    } catch (ex) {
        console.error(ex);
        return null;
    }
};

/**
 * @method 
 * @name setInterval
 * @description 사용자가 지정한 함수가 주기적으로 실행된다.
 * @param {Function} func	실행할 함수
 * @param {Object} options	options인자로는 아래와 같은 인자가 사용된다.
 * @param {String} options.key timer를 구별하기 위한 키값. 이 값이 지정되지 않은 경우 키값을 func.toString().slice(0,30)을 키값으로 사용한다.
 * @param {Number} options.delay setInterval의 2번째 인자값. func함수가 delay시간 이후에 실행되도록 한다.  기본값은 1이다.
 * @param {Object} options.caller func내에서 this값을 caller로 변경한다.
 * @param {Object} options.args func에 전달할 인자값. array형태로 인자를 전달한다.
 * @param {Function} options.before_call : func 함수가 실행되기 직전에 실행할 함수. func함수와 마찬가지로 data를 인자로 받는다.
 * @param {Function} options.callback : func함수가 실행된 후에 실행할 함수. func함수의 return값을 인자로 받는다
 * @hidden N
 * @exception 
 * @example
$c.util.setInterval(
    function($p, ) {
        $c.win.alert("처리가 완료 되었습니다");
    },
    { caller : grd_data1, delay : 2000, key : "interval1" }
);
 */
scwin.setInterval = function (func, options) {
    $p.setInterval(func, options);
};


/**
 * @method 
 * @name clearInterval
 * @description 
 * $c.util.setInterval API를 이용하여 등록 한 함수를 직접 Clear시킨다.
 * 실행할 함수를 setInterval로 등록하여 함수가 주기적으록 계속 실행되도록 한다. SPA모드에서 페이지 이동 시 함수로 등록한 타이머를 자동으로 제거한다.
 * 
 * @param {String} func	key로 지정한 값. ( $c.util.setInterval API 호출 시 options에 등록 한 key명)
 * @param {Boolean} options keyName으로 지정 된 Interval 객체를 해제하기 전 해당 함수를 한 번 실행할지에 대한 여부. 기본값은 false.
 * @hidden N
 * @exception 
 * @example
$c.util.setInterval(
    function($p, ) {
        $c.win.alert("처리가 완료 되었습니다");
    },
    { caller : grd_data1, delay : 2000, key : "interval1" }
);
 */
scwin.clearInterval = function (func, options) {
    $p.clearInterval(func, options);
};

/**
 * @method 
 * @name setTimeout
 * @description 
 * 사용자가 지정한 함수가 일정 시간 후에 실행된다.
 * 실행할 함수를 setInterval로 등록하여 함수가 주기적으로 계쏙 실행되도록 한다. SPA모드에서 페이지 이동 시 이 함수로 등록한 타이머를 자동으로 제거한다.
 * 
 * @param {Function} func	실행할 함수
 * @param {Object} options	options인자로는 아래와 같은 인자가 사용된다.
 * @param {String} options.key timeout을 구별하기 위한 키값. 이 값이 지정되지 않은 경우 키값을 func.toString().slice(0,30)을 키값으로 사용한다.
 * @param {Number} options.delay func로 지정한 함수가 실행 될 간격으로 기본값은 1ms(millisecond / 1000분의 1초)이다. javascript setTimeout의 2번째 인자값.
 * @param {Object} options.caller func로 지정한 함수내에서 this값으로 지정 할 객체(웹스퀘어 컴포넌트 포함).
 * @param {Object} options.args func에 전달할 인자값. array형태로 인자를 전달한다.
 * @param {Function} options.before_call : func로 지정한 함수가 실행되기 직전에 실행 할 함수. func함수와 마찬가지로 data를 인자로 받는다.
 * @param {Function} options.callback : func로 지정한 함수가 실행된 후에 실행 할 함수. func로 지정한 함수의 return값을 인자로 받는다.
 * @hidden N
 * @exception 
 * @example
$c.util.setTimeout(
    function($p, ) {
        $c.win.alert("5분이 지났습니다.");
    },
    { delay : 300000, key : "loginTimeout" }
);
 */
scwin.setTimeout = function (func, options) {
    $p.setTimeout(func, options);
};

/**
 * @method 
 * @name clearTimeout
 * @description 
 * $c.util.setTimer API를 이용하여 등록 한 함수를 직접 Clear시킨다.
 * 실행할 함수를 setInterval로 등록하여 함수가 주기적으로 계속 실행되도록 한다. SPA모드에서 페이지 이동 시 이 함수로 등록한 타이머를 자동으로 제거한다.
 * @param {String} func	key로 지정한 값. ( $c.util.setTimeout API 호출 시 options에 등록 한 key명)
 * @param {Boolean} options	keyName으로 지정 된 Interval 객체를 해제하기 전 해당 함수를 한 번 실행할지에 대한 여부. 기본값은 false.
 * @hidden N
 * @exception 
 * @example
$c.util.clearTimeout("timer1");
 */
scwin.clearTimeout = function (func, options) {
    $p.clearTimeout(func, options);
};


/**
 * @method 
 * @name copyClipboard
 * @description 
 * 입력 가능한 컴포넌트(input, textarea 등) 객체의 내용을 클립보드에 저장한다.
※ 주의사항
- IE 10+, Chrome 43+, Opera 29+, Firefox에서만 사용 가능함
- IE의 경우 클립보드 복사 허용을 묻는 확인 창이 뜸
 * @param {Object} comObj 컴포넌트 컴포넌트 객체
 * @hidden N
 * @exception 
 * @example
// ibx_message InputBox내 Text가 Select 되면서 Clipboard에 복사된다.
$c.util.copyClipboard(ibx_message);
 */
scwin.copyClipboard = async function (comObj) {
    if (typeof comObj !== "undefined") {
        comObj.focus();
        comObj.select();
    }
    if ($c.util.getUserAgent() === "msie") {
        document.execCommand("Copy");
    } else {
        const comVal = comObj.getValue();
        try {
            await navigator.clipboard.writeText(comVal);
            $c.win.alert("정상적으로 복사가 되었습니다.");
        } catch (err) {
            console.error('클립보드 복사 중 오류가 발생했습니다:', err);
        }
    }
}

]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload"/>
</html>
