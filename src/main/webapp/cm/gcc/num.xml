<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenName="숫자 관련 함수" meta_screenId="$c.num" meta_screenDesc="숫자 관련 함수를 작성한다.">
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map"/>
			<w2:workflowCollection/>
		</xf:model>
		<w2:layoutInfo/>
		<w2:publicInfo method="scwin.round,scwin.floor,scwin.ceil,scwin.formatMoney,scwin.formatNumber,scwin.isNumber,scwin.isOdd,scwin.parseInt,scwin.parseFloat,scwin.formatByte"/>
		<script lazy="false" type="text/javascript"><![CDATA[scwin.onpageload = function () {

};

/**
 * @method
 * @name round
 * @description 반올림 처리를 한다.
 * @param {String|Number} value 반올림 처리를 할 값
 * @param {Number} point 반올림 처리를 할 소수점 자리 수 (Default : 0, 정수 값으로 반올림 처리)
 * @returns {Number} 반올림 처리를 한 숫자 값
 * @example
$c.num.round(23.4567); // return 예시) 23
$c.num.round(23.5567); // return 예시) 24
$c.num.round(23.5567, 2); // return 예시) 23.56
$c.num.round(23.5564, 3); // return 예시) 23.556

 * @hidden N
 * @exception 
 */
scwin.round = function (value, point) {
    let num = 1;
    if (typeof point !== "undefined") {
        num = Math.pow(10, point);
    }

    return Math.round(Number(value) * num) / num;
};


/**
 * @method
 * @name floor
 * @description 내림 처리를 한다.
 * @param {String|Number} value 내림 처리를 할 값
 * @param {Number} point 내림 처리를 할 소수점 자리 수 (Default : 0, 정수 값으로 내림 처리)
 * @returns {Number} 내림 처리를 한 숫자 값
 * @example
$c.num.round(23.4567); // return 예시) 23
$c.num.round(23.5567); // return 예시) 24
$c.num.round(23.5567, 2); // return 예시) 23.56
$c.num.round(23.5564, 3); // return 예시) 23.556
 * @hidden N
 * @exception 
 */
scwin.floor = function (value, point) {
    let num = 1;
    if (typeof point !== "undefined") {
        num = Math.pow(10, point);
    }

    return Math.floor(Number(value) * num) / num;
};


/**
 * @method
 * @name ceil
 * @description 올림 처리를 한다.
 * @param {String} value 올림 처리를 할 값 (String 또는 Number 타입 지원)
 * @param {Integer} point 올림 처리를 할 소수점 자리 수 (Default : 0, 정수 값으로 올림 처리)
 * @returns {Number} 올림 처리를 한 숫자 값
 * @example
$c.num.ceil(23.5567); // return 예시) 24
$c.num.ceil(23.5567, 2); // return 예시) 23.56
 * @hidden N
 * @exception 
 */
scwin.ceil = function (value, point) {
    let num = 1;
    if (typeof point !== "undefined") {
        num = Math.pow(10, point);
    }

    return Math.ceil(Number(value) * num) / num;
};

/**
 * @method
 * @name formatMoney
 * @description 세번째자리마다 콤마 표시, 금액, setDisplayFormat("#,###&#46##0", "fn_userFormatter2") - 입력된 str 포메터를 적용하여 반환
 * @param {String|Number} value 포멧터를 적용할 값
 * @param {String} type 적용할 포멧터 형식(Default:null,dollar,plusZero,won)
 * @returns {String} 포멧터가 적용된 문자열
 * @example
$c.num.formatMoney("12345"); // 12,345
$c.num.formatMoney("12345", "dollar"); // $12,345
$c.num.formatMoney("12345", "plusZero"); // 123,450
$c.num.formatMoney("12345", "won"); // 12,345원
 * @hidden N
 * @exception 
 */
scwin.formatMoney = function (value, type) {
    let amount;

    if (type == "plusZero") {
        amount = new String(value) + "0";
    } else {
        amount = new String(value);
    }

    amount = amount.split(".");

    const amount1 = amount[0].split("").reverse();
    const amount2 = amount[1];

    let output = "";
    for (let i = 0; i <= amount1.length - 1; i++) {
        output = amount1[i] + output;
        if ((i + 1) % 3 == 0 && (amount1.length - 1) !== i)
            output = ',' + output;
    }

    if (type == "dollar") {
        if (!amount2) {
            output = "$ " + output;
        } else {
            output = "$ " + output + "." + amount2;
        }
    } else if (type == "won") {
        if (!amount2) {
            output = output + "원";
        } else {
            output = output + "." + amount2 + "원";
        }
    } else {
        if (!amount2) {
            output = output;
        } else {
            output = output + "." + amount2;
        }
    }

    return output;
};


/**
 * @method
 * @name formatNumber
 * @description 셋째자리마다 콤마를 추가해서 반환한다.
 * @param {String|Number} value 포멧터를 적용할 값
 * @returns {String} 포멧터가 적용된 문자열
 * @example
$c.num.formatNumber("12345677"); // "12,345,677"
$c.num.formatNumber(12345677); // "12,345,677"
$c.num.formatNumber(-12345677); // "-12,345,677"
 * @hidden N
 * @exception 
 */
scwin.formatNumber = function (value) {

    if (typeof $p == 'string') {
        value = $p;
        return WebSquare.util.setNumber(value);
    };

    return WebSquare.util.setNumber(value);
};


/**
 * @method
 * @name isNumber
 * @description 숫자가 맞는지 여부를 검사한다.
 * @param {String|Number} value 검사할 숫자 값
 * @returns {Boolean} 숫자이면 true, 아니면 false 반환
 * @example
$c.num.formatNumber("12345677"); // "12,345,677"
$c.num.formatNumber(12345677); // "12,345,677"
$c.num.formatNumber(-12345677); // "-12,345,677"
 * @hidden N
 * @exception 
 */
scwin.isNumber = function (value) {
    return !isNaN(value);
};


/**
 * @method
 * @name isOdd
 * @description 홀수가 맞는지 여부를 검사한다.
 * @param {String|Number} value 검사할 값
 * @returns {Boolean} 홀수이면 true, 아니면 false 반환
 * @example
$c.num.isOdd("123"); // true;
$c.num.isOdd(123); // true;
$c.num.isOdd("122"); // false;
$c.num.isOdd(122); // false;
 * @hidden N
 * @exception 
 */
scwin.isOdd = function (value) {
    return WebSquare.util.isOdd(value);
};

/**
 * @method
 * @name parseInt
 * @description 문자열을 정수형으로 변환한다.
 * @param {String} value 정수 문자열 
 * @param {Number} defaultValue 결과가 NaN일때 반환할 기본 값
 * @return {Number} 변환된 정수형 값
 * @hidden N
 * @exception 
 * @example
$c.num.parseInt("5231"); // 5231;
 */
scwin.parseInt = function (value, defaultValue) {
    return WebSquare.util.parseInt(value, defaultValue);
};


/**
 * @method
 * @name parseFloat
 * @description 문자열을 실수형으로 변환한다.
 * @param {String} value 실수 문자열 
 * @param {Number} defaultValue 결과가 NaN일때 반환할 기본 값
 * @returns {Number} 변환된 실수형 값
 * @example
$c.num.parseFloat("5231.22"); // 5231.22;
 * @hidden N
 * @exception 
 */
scwin.parseFloat = function (value, defaultValue) {
    return WebSquare.util.parseFloat(value, defaultValue);
};


/**
 * @method
 * @name formatByte
 * @description 바이트 값을 적절한 단위(KB, MB, GB)를 변환해서 반환한다.
 * @param {String} value 변환할 값
 * @example
$c.num.formatByte(32132);
 * @hidden N
 * @exception 
 */
scwin.formatByte = function (value) {
    const unitType = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
    if (value == 0 || value == "0" || isNaN(value)) {
        return 0 + " " + unitType[0];
    }
    const index = Math.floor(Math.log(value) / Math.log(1024));
    return (value / Math.pow(1024, index)).toFixed(1) + " " + unitType[index];
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload"/>
</html>
