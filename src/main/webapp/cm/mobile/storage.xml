<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
    <head meta_screenId="$c.storage" meta_screenName="storage" meta_desc="storage 기능을 모아놓은 플러그인으로 이벤트 및 API를 제공한다. \n제공되는 API로는 reset, getPreference, setPreference, removePreference, shareData를 제공합니다." meta_subsystem="common" meta_author="인스웨이브" meta_type="메인" meta_vertical_guides="" meta_horizontal_guides="1640">
        <w2:type palette="support">COMMON</w2:type>
        <w2:buildDate/>
        <w2:MSA/>
        <xf:model>
            <w2:dataCollection baseNode="map"/>
            <w2:workflowCollection/>
        </xf:model>
        <w2:layoutInfo/>
        <w2:publicInfo method="scwin.reset,scwin.getPreference,scwin.setPreference,scwin.removePreference,scwin.shareData"/>
        <script lazy="false" type="text/javascript"><![CDATA[ 
/**
 * @component
 * @componentName gcc_storage
 * @pluginName 
 * @company 
 * @developer uapmobile
 * @category /cm/gcc/mobile
 * @notSupportBrowser 
 * @version
 * @htmlRender
 * @icon
 * @disableIcon
 * @description 앱내부에 저장되는 데이터관련 플러그인으로 API를 제공한다. 제공되는 API로는 setPreference, getPreference, removePreference, shareData 기능들이 있다.
 * @variableClone true
 * @width
 * @height
 * @license
 * @homepage http://
 * @imagePath ./sampleImages
 */


scwin.onpageload = function() {
};

/**
 * @method
 * @name reset
 * @description wmatrix app의 엔진, 리소스, DB, cache 및 모든 설정을 reset 한다.
 * @param {JSON} options object
 * @param {Boolean} options.popup 리셋 pop up 생성 여부 [default: true, false]
 * @param {String} options.message 리셋 pop up 메시지 [default: "앱을 초기화하고 종료합니다."]
 * @param {Boolean} options.clearData 데이터 초기화 여부 [default: true, false]
 * @param {Boolean} options.clearCache 캐시 초기화 여부 [default: true, false]
 * @returns {Promise} 
 * @hidden N
 * @exception 
 * @example const callback = (r)=>{ console.log(r); };
 * let options = {};
 * options.popup = true;
 * options.message = "앱을 초기화하시겠습니까?";
 * options.clearData = true;
 * options.clearCache = true;
 * $c.storage.reset(options).then(callbakc);
 * 
 */
scwin.reset = function(options) {
    try {
        if (typeof $h.storage === "object") {
            return new Promise(resolve => {
                $h.storage.reset(resolve, options);
            });
        } else {
            console.log("Not found storage Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

/**
 * @method
 * @name getPreference
 * @description native preference에서 값을 가져온다.
 * @param {JSON} options preference에 저장된 값을 불러오기 위한 옵션
 * @param {String} options.key 가져올 Preference Key
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지", "data":{"getPreference": "값"}}
 * @hidden N
 * @exception 
 * @example const callback = (r) => { console.log(r); };
 * let options = {};
 * options.key = "test1";
 * $c.storage.getPreference(options).then(callback);
 * 
 */
scwin.getPreference = function(options) {
    try {
        if (typeof $h.storage === "object") {
            return new Promise(resolve => {
                $h.storage.getPreference(resolve, options);
            });
        } else {
            console.log("Not found Storage Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

/**
 * @method
 * @name setPreference
 * @description native preference에 값을 저장한다.
 * @param {JSON} options preference에 저장할 key:value 옵션
 * @param {String} options.key 저장할 Preference Key 
 * @param {String} options.value 저장할 Preference Value
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example const callback = (r)=>{console.log(r);};
 * let options = {};
 * options.key = "test1";
 * options.value = "test1 value";
 * $c.storage.setPreference(options).then(callback);
 * 
 */
scwin.setPreference = function(options) {
    try {
        if (typeof $h.storage === "object") {
            return new Promise(resolve => {
                $h.storage.setPreference(resolve, options);
            });
        } else {
            console.log("Not found Storage Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

/**
 * @method
 * @name removePreference
 * @description native preference에서 값을 삭제한다.
 * @param {JSON} options app params
 * @param {String} options.key 삭제할 Preference Key
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example const callback = (r)=>{console.log(r);}
 * let options = {};
 * options.key = "test1";
 * $c.storage.removePreference(options).then(callback);
 * 
 */
scwin.removePreference = function(options) {
    try {
        if (typeof $h.storage === "object") {
            return new Promise(resolve => {
                $h.storage.removePreference(resolve, options);
            });
        } else {
            console.log("Not found Storage Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

/**
 * @method
 * @name shareData
 * @description 주어진 data의 URL을 이용하여 다른 앱과 공유한다.
 * @param {JSON} options preference에 저장된 값을 삭제하기 위한 옵션
 * @param {Int} options.type share 할 data type [default:URL|0, image|1]
 * @param {String} options.data share 할 data URL
 * @param {String} options.title share chooser 에 표시 될 title
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example const callback = (r)=>{console.log(r);};
 * let options = {};
 * options.type = 1;
 * options.data = "https://www.naver.com";
 * options.title = "Select App"
 * $c.storage.shareData(options).then(callback);
 */
scwin.shareData = function(options) {
     try {
        if (typeof $h.storage === "object") {
            return new Promise(resolve => {
                $h.storage.shareData(resolve, options);
            });
        } else {
            console.log("Not found Storage Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload"/>
</html>
