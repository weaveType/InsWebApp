<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
    <head meta_screenId="$c.screen" meta_screenName="screen" meta_desc="화면기능을 모아놓은 플러그인으로 이벤트 및 API를 제공한다. \n제공되는 API로는 startWebView, screenCapture, setupBrightness, screenOrientation 같은기능을 제공한다." meta_subsystem="common" meta_author="인스웨이브" meta_type="메인" meta_vertical_guides="" meta_horizontal_guides="1640">
        <w2:type palette="support">COMMON</w2:type>
        <w2:buildDate/>
        <w2:MSA/>
        <xf:model>
            <w2:dataCollection baseNode="map"/>
            <w2:workflowCollection/>
        </xf:model>
        <w2:layoutInfo/>
        <w2:publicInfo method="scwin.setupBrightness,scwin.screenCapture,scwin.screenOrientation,scwin.startWebView,scwin.closeSubWebview"/>
        <script lazy="false" type="text/javascript"><![CDATA[ 
/**
 * @component
 * @componentName gcc_screen
 * @pluginName 
 * @company 인스웨이브
 * @developer uapmobile
 * @category /cm/gcc/mobile
 * @notSupportBrowser 
 * @version
 * @htmlRender
 * @icon
 * @disableIcon
 * @description 디바이스(폰,테블릿)에 화면 녹화/녹음에 필요한 녹화, 저장, 취소, 일시정지 등에 API를 제공한다.
 * @variableClone true
 * @width
 * @height
 * @license
 * @homepage http://
 * @imagePath ./sampleImages
 */

scwin.onpageload = function() {
};

/**
 * @method
 * @name setupBrightness
 * @description 앱 화면의 밝기를 조절한다.
 * @param {JSON} options 화면 밝기 옵션
 * @param {Int} options.brightness 화면 밝기의 정도 (1~100)
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example 
 * const callback = function(result){ console.log(result);};
 * let options = {};
 * options.brightness = 1;
 * $c.screen.setupBrightness(options).then(callback);
 */
scwin.setupBrightness = function(options) {
    try {
        if (typeof $h.screen === "object") {
            $h.screen.setupBrightness(callback, options);
        } else {
            console.log("Not found Screen Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

/**
 * @method
 * @name screenCapture
 * @description 현재 보이는 화면을 capter하여 해당 이미지 base64 string을 Web으로 전달한다.
 * @param {JSON} options 화면 캡처 범위, 이미지 품질, 저장 여부 옵션
 * @param {Boolean} options.allView native를 포함한 모든 view를 캡처할지 여부 [default: false, true]
 * @param {Boolean} options.saveAlbum screen capture한 이미지를 album에 저장할지 여부 [default: false, true]
 * @param {Int} options.quality capture할 image의 quality [default: 70]
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지", data:{"imgBase64":"data:image/jpg;base64..."}}
 * @hidden N
 * @exception 
 * @example 
 * const callback = function(result){ console.log(result);};
 * let options = {};
 * options.allView = false;
 * options.quality = 50;
 * $c.app.screenCapture(options).then(callback);
 */ 
scwin.screenCapture = function(callback, options) {
    try {
        if(typeof $h.app === "object"){
            $h.screen.screenCapture(callback, options);
        } else {
            console.log("Not found Screen Plugin");
        }
    } catch (e){
        console.log(e);
    }
}


/**
 * @method
 * @name startWebView
 * @description 새로운 webview에서 지정된 페이지를 로드한다.
 * @param {JSON} options 추가할 웹뷰 시작 옵션
 * @param {String} options.url 실행할 page 경로 또는 URL
 * @param {JSON} options.header 실행할 page 요청 header
 * @returns {Promise} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example 
 * const callback = function(result){ console.log(result);};
 * let options = {};
 * options.url = "${화면 경로 또는 Web URL}";
 * $c.screen.startWebview(options).then(callback);
 */ 
scwin.startWebView = function(options) {
    return new Promise((resolve, reject) => {
        try {
            if (typeof $h.screen === "object") {
                 $h.screen.startWebview(resolve,options);
            } else {
                reject("Not found Screen Plugin");
            }
        } catch (e) {
            reject(e);
        }
    });
}

/**
 * @method
 * @name closeSubWebview
 * @description startWebView로 추가된 webView를 닫는다.
 * @returns {JSON} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example
 * var callback = function(result){ console.log(result);};
 * $c.screen.closeSubWebview(callback);
 */ 
scwin.closeSubWebview = function() {
    try {
        if(typeof $h.screen === "object"){
          $h.screen.closeSubWebview(callback);
        } else {
            console.log("Not found Screen Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

/**
 * @method
 * @name screenOrientation
 * @description 주어진 Orientation 속성을 Native View에 설정한다. (Android Only)
 * @param {JSON} options 화면 방향 설정 옵션
 * @param {String} options.orientation 설정할 orientation 속성 [default: Sensor|0, Portrait|1, Landscape|2, Landscape Sensor|3]
 * @returns {JSON} rtn {"statusCode": "코드", "msg": "메시지"}
 * @hidden N
 * @exception 
 * @example 
 * var callback = function(result){ console.log(result);};
 * var options = {};
 * options.orientation = 1;
 * $c.screen.screenOrientation(callback, options);
 */ 
scwin.screenOrientation = function(callback, options) {
    try {
        if (typeof $h.screen === "object") {
            $h.screen.screenOrientation(callback, options);
        } else {
            console.log("Not found Screen Plugin");
        }
    } catch (e){
        console.log(e);
    }
}

 
]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload"/>
</html>
