<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
    xmlns:xf="http://www.w3.org/2002/xforms">
    
    <head meta_screenName="이력서 PDF 뷰어">
        <w2:type>COMPONENT</w2:type>
        <w2:buildDate />
        <w2:MSA />
        <xf:model>
            <w2:dataCollection baseNode="map">
                <!-- 검색 파라미터 -->
                <w2:dataMap baseNode="map" id="dma_searchParam">
                    <w2:keyInfo>
                        <w2:key id="userId" name="사용자 ID" dataType="number"></w2:key>
                    </w2:keyInfo>
                </w2:dataMap>
                
                <!-- 이력서 정보 -->
                <w2:dataMap baseNode="map" id="dma_resumeInfo">
                    <w2:keyInfo>
                        <w2:key id="result" name="결과" dataType="text"></w2:key>
                        <w2:key id="hasResume" name="이력서 존재 여부" dataType="boolean"></w2:key>
                        <w2:key id="resumeFileName" name="이력서 파일명" dataType="text"></w2:key>
                        <w2:key id="displayName" name="표시 파일명" dataType="text"></w2:key>
                        <w2:key id="viewUrl" name="조회 URL" dataType="text"></w2:key>
                        <w2:key id="message" name="메시지" dataType="text"></w2:key>
                    </w2:keyInfo>
                </w2:dataMap>
                
                <!-- 사용자 목록 (동적으로 로드) -->
                <w2:dataList id="dlt_userList" baseNode="list" repeatNode="map" saveRemovedData="true">
                    <w2:columnInfo>
                        <w2:column id="userId" name="사용자 ID" dataType="number"></w2:column>
                        <w2:column id="name" name="이름" dataType="text"></w2:column>
                        <w2:column id="email" name="이메일" dataType="text"></w2:column>
                    </w2:columnInfo>
                </w2:dataList>
                
                <!-- 사용자 조회 파라미터 -->
                <w2:dataMap baseNode="map" id="dma_userSearchParam">
                    <w2:keyInfo>
                        <w2:key id="pageIndex" name="페이지 인덱스" dataType="number"></w2:key>
                        <w2:key id="pageSize" name="페이지 크기" dataType="number"></w2:key>
                    </w2:keyInfo>
                </w2:dataMap>
                
                <!-- 사용자 조회 결과 -->
                <w2:dataMap baseNode="map" id="dma_userListResult">
                    <w2:keyInfo>
                        <w2:key id="totalCount" name="전체 개수" dataType="number"></w2:key>
                        <w2:key id="pageSize" name="페이지 크기" dataType="number"></w2:key>
                        <w2:key id="pageIndex" name="페이지 인덱스" dataType="number"></w2:key>
                    </w2:keyInfo>
                </w2:dataMap>
            </w2:dataCollection>
            
            <!-- 이력서 정보 조회 submission -->
            <xf:submission id="sbm_getResumeInfo" action="/InsWebApp/USGetResumeInfo.pwkjson" method="get" mediatype="application/json"
                ref="" target="" encoding="UTF-8" instance="" replace="" errorHandler=""
                customHandler="" mode="asynchronous" processMsg="이력서 정보 조회중" ev:submit="scwin.sbm_getResumeInfo_submit" ev:submitdone="scwin.sbm_getResumeInfo_submitdone" ev:submiterror="scwin.sbm_getResumeInfo_submiterror" abortTrigger="">
            </xf:submission>
            
            <!-- 사용자 목록 조회 submission -->
            <xf:submission id="sbm_getUserList" action="/InsWebApp/US0001List.pwkjson" method="post" mediatype="application/json"
                ref='data:json,{"id":"dma_userSearchParam"}' target='data:json,{"id":"dma_userListResult","key":"elData"}' encoding="UTF-8" instance="" replace="" errorHandler=""
                customHandler="" mode="asynchronous" processMsg="사용자 목록 조회중" ev:submit="" ev:submitdone="scwin.sbm_getUserList_submitdone" ev:submiterror="scwin.sbm_getUserList_submiterror" abortTrigger="">
            </xf:submission>
        </xf:model>
        <w2:layoutInfo />
        <w2:publicInfo method="" />
        
        <style type="text/css"><![CDATA[
            /* 전체 레이아웃 스타일 */
            .main-container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: 'Noto Sans KR', sans-serif;
            }
            
            /* 섹션 스타일 */
            .section {
                background-color: #fff;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                padding: 24px;
                margin-bottom: 20px;
            }
            
            .section-title {
                font-size: 18px;
                font-weight: 600;
                color: #333;
                margin-bottom: 16px;
                padding-bottom: 8px;
                border-bottom: 1px solid #eee;
            }
            
            /* 폼 스타일 */
            .form-group {
                display: flex;
                align-items: center;
                margin-bottom: 16px;
            }
            
            .form-label {
                width: 120px;
                font-size: 14px;
                color: #555;
            }
            
            .form-input {
                flex: 1;
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }
            
            .form-select {
                flex: 1;
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }
            
            .form-button {
                padding: 8px 16px;
                background-color: #4a6baf;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                margin-left: 8px;
            }
            
            .form-button:hover {
                background-color: #3a5b9f;
            }
            
            /* 결과 영역 스타일 */
            .result-area {
                margin-top: 20px;
                padding: 16px;
                background-color: #f9f9f9;
                border-radius: 4px;
                border: 1px solid #eee;
            }
            
            .result-item {
                margin-bottom: 8px;
                font-size: 14px;
                display: flex;
            }
            
            .result-label {
                width: 120px;
                color: #666;
                font-weight: 500;
            }
            
            .result-value {
                flex: 1;
                color: #333;
            }
            
            /* PDF 뷰어 영역 스타일 */
            .pdf-viewer {
                margin-top: 20px;
                border: 1px solid #ddd;
                border-radius: 4px;
                overflow: hidden;
                height: 600px;
            }
            
            .pdf-iframe {
                width: 100%;
                height: 100%;
                border: none;
            }
            
            /* 파일 링크 스타일 */
            .file-link {
                color: #4a6baf;
                text-decoration: underline;
                cursor: pointer;
            }
            
            .file-link:hover {
                color: #3a5b9f;
            }
            
            /* 메시지 스타일 */
            .message {
                padding: 12px;
                border-radius: 4px;
                margin-bottom: 16px;
                font-size: 14px;
            }
            
            .message.success {
                background-color: #e7f5ea;
                color: #28a745;
                border: 1px solid #d4edda;
            }
            
            .message.error {
                background-color: #f8d7da;
                color: #dc3545;
                border: 1px solid #f5c6cb;
            }
            
            .message.info {
                background-color: #e2f0fd;
                color: #0d6efd;
                border: 1px solid #c9e3fc;
            }
            
            .message.warning {
                background-color: #fff3cd;
                color: #ffc107;
                border: 1px solid #ffecb5;
            }
            
            /* 반응형 스타일 */
            @media (max-width: 768px) {
                .form-group {
                    flex-direction: column;
                    align-items: flex-start;
                }
                
                .form-label {
                    width: 100%;
                    margin-bottom: 8px;
                }
                
                .form-button {
                    margin-left: 0;
                    margin-top: 8px;
                    width: 100%;
                }
                
                .result-item {
                    flex-direction: column;
                }
                
                .result-label {
                    width: 100%;
                    margin-bottom: 4px;
                }
                
                .pdf-viewer {
                    height: 400px;
                }
            }
        ]]></style>
        
        <script lazy="false" type="text/javascript"><![CDATA[
// 페이지 로드 시 실행
scwin.onpageload = function () {

    // 중복 조회 방지 플래그 초기화
    scwin.initialQueryDone = false;

    // 페이지 파라미터 설정
    dma_userSearchParam.set("pageIndex", 1);
    dma_userSearchParam.set("pageSize", 100); // 최대 100명까지 조회

    // URL에서 사용자 ID 확인 - 여러 파라미터명을 지원
    var urlParams = new URLSearchParams(window.location.search);
    var userId = null;
    var paramNames = ["userId", "user_id", "accountId", "id"];

    for (var i = 0; i < paramNames.length; i++) {
        var paramValue = urlParams.get(paramNames[i]);
        if (paramValue) {
            userId = parseInt(paramValue, 10);
            console.log("URL 파라미터에서 사용자 ID 확인: " + userId + " (파라미터명: " + paramNames[i] + ")");
            break;
        }
    }

    // 사용자 ID가 있는 경우 설정
    if (userId) {
        // 데이터맵에 설정
        dma_searchParam.set("userId", userId);
        scwin.selectedUserId = userId;

        // 이력서 정보 직접 조회 (URL 파라미터 방식으로 변경)
        var apiUrl = "/InsWebApp/USGetResumeInfo.pwkjson?userId=" + userId;
        console.log("API URL: " + apiUrl);

        // submission의 action URL을 동적으로 설정
        sbm_getResumeInfo.action = apiUrl;

        // 이력서 정보 조회 - URL 파라미터 방식으로 직접 호출
        $c.sbm.execute($p, sbm_getResumeInfo);

        // 이미 조회했음을 표시
        scwin.initialQueryDone = true;
    } else {
        // URL 파라미터가 없는 경우 기본값 설정
        dma_searchParam.set("userId", 7); // 테스트용 ID 설정
    }

    // 사용자 목록 조회 (이력서 조회 성공 여부와 관계없이 백그라운드로 진행)
    scwin.getUserList();
};

// 사용자 목록 조회
scwin.getUserList = function () {
    try {
        console.log("사용자 목록 조회 시작");

        // 페이지 파라미터 재설정
        dma_userSearchParam.set("pageIndex", 1);
        dma_userSearchParam.set("pageSize", 100); // 최대 100명까지 조회

        // 로딩 메시지 표시
        grp_message.show();
        grp_message.removeClass("error");
        grp_message.removeClass("success");
        grp_message.addClass("info");
        txt_message.setValue("사용자 목록을 조회하는 중입니다...");

        // API 호출
        $c.sbm.execute($p, sbm_getUserList);
    } catch (e) {
        console.error("사용자 목록 조회 실행 오류:", e);
        // 오류 발생 시 기본 데이터 설정
        scwin.showErrorMessage("사용자 목록 조회 중 오류가 발생했습니다: " + e.message);
        scwin.setDefaultUserList();
    }
};

// 기본 사용자 목록 설정 (API 호출 실패 시)
scwin.setDefaultUserList = function () {
    console.log("기본 사용자 목록 설정");

    // 데이터베이스에서 확인한 사용자 목록
    var defaultUserList = [
        { userId: 1, name: "이재성", email: "test@example.com" },
        { userId: 2, name: "홍길동", email: "test2@example.com" },
        { userId: 3, name: "연봉테스트사용자", email: "test_salary@example.com" },
        { userId: 4, name: "연봉테스트사용자", email: "salary_test@example.com" },
        { userId: 5, name: "문재인", email: "test3@example.com" },
        { userId: 6, name: "아잉이잉", email: "test22@example.com" },
        { userId: 7, name: "비밀의사나이", email: "hi@example.com" }
    ];

    // 데이터리스트에 설정
    dlt_userList.setJSON(defaultUserList);

    // 이력서가 있는 사용자 선택 (ID: 7)
    dma_searchParam.set("userId", 7);
    sel_user.setValue(7);

    // 이력서 정보 자동 조회
    scwin.btn_getResumeInfo_onclick();
};

// 사용자 목록 조회 완료 이벤트
scwin.sbm_getUserList_submitdone = function (e) {
    console.log("사용자 목록 조회 완료", e);

    try {
        // 응답 확인
        if (!e || !e.responseJSON) {
            console.error("사용자 목록 응답 데이터가 없습니다.");
            scwin.showErrorMessage("서버 응답 데이터가 없습니다.");
            scwin.setDefaultUserList();
            return;
        }

        // 응답 구조 확인 - responseData 전체 확인
        var responseData = e.responseJSON;
        console.log("사용자 목록 응답 데이터 구조:", responseData);

        // 사용자 목록 데이터 매핑 - 여러 가능한 경로 확인
        var userVoList = null;
        var totalCount = 0;

        if (responseData.elData && responseData.elData.userVoList) {
            // 기존 예상 구조
            userVoList = responseData.elData.userVoList;
            totalCount = responseData.elData.totalCount || 0;
        } else if (responseData.userVoList) {
            // 다른 가능한 구조 1
            userVoList = responseData.userVoList;
            totalCount = responseData.totalCount || 0;
        } else if (Array.isArray(responseData)) {
            // 다른 가능한 구조 2 (배열 직접 반환)
            userVoList = responseData;
            totalCount = responseData.length || 0;
        }

        console.log("사용자 목록 데이터 매핑 결과:", {
            totalCount: totalCount,
            userCount: userVoList ? userVoList.length : 0
        });

        if (userVoList && userVoList.length > 0) {
            // 데이터 변환 (필요한 필드만 추출)
            var userList = [];
            for (var i = 0; i < userVoList.length; i++) {
                var user = userVoList[i];
                if (user) {
                    var userId = user.accountId || user.userId || user.user_id;
                    if (userId) {
                        userList.push({
                            userId: userId,
                            name: user.name || "사용자" + userId,
                            email: user.email || ""
                        });
                    }
                }
            }

            if (userList.length > 0) {
                console.log("변환된 사용자 목록:", userList);

                // 데이터리스트에 설정
                dlt_userList.setJSON(userList);

                // 선택할 사용자 ID 확인
                var userIdToSelect = scwin.selectedUserId || dma_searchParam.get("userId");
                var userFound = false;

                // 해당 사용자를 목록에서 찾아 선택
                if (userIdToSelect) {
                    for (var i = 0; i < userList.length; i++) {
                        if (userList[i].userId === userIdToSelect) {
                            sel_user.setValue(userIdToSelect);
                            userFound = true;
                            break;
                        }
                    }
                }

                // 사용자를 찾지 못했거나 선택할 사용자가 없는 경우 첫 번째 사용자 선택
                if (!userFound) {
                    dma_searchParam.set("userId", userList[0].userId);
                    sel_user.setValue(userList[0].userId);
                }

                // 성공 메시지 표시 (불필요한 메시지는 표시하지 않음)
                // 이미 URL 파라미터로 조회한 경우 중복 조회 방지
                if (!scwin.initialQueryDone) {
                    // 이력서 정보 자동 조회 (URL 파라미터 방식으로 변경)
                    var apiUrl = "/InsWebApp/USGetResumeInfo.pwkjson?userId=" + dma_searchParam.get("userId");
                    sbm_getResumeInfo.action = apiUrl;
                    $c.sbm.execute($p, sbm_getResumeInfo);

                    scwin.initialQueryDone = true;
                }
                return;
            }
        }

        // 유효한 사용자 목록이 없는 경우 기본 데이터 설정
        console.log("유효한 사용자 목록이 없습니다. 기본 데이터를 사용합니다.");
        scwin.setDefaultUserList();
    } catch (err) {
        console.error("사용자 목록 처리 중 오류:", err);
        scwin.showErrorMessage("사용자 목록 처리 중 오류가 발생했습니다: " + err.message);
        scwin.setDefaultUserList();
    }
};

// 사용자 목록 조회 오류 이벤트
scwin.sbm_getUserList_submiterror = function (e) {
    console.error("사용자 목록 조회 오류", e);

    try {
        // 오류 상세 정보 로깅
        var errorInfo = {
            status: e.status,
            statusText: e.statusText,
            responseText: e.responseText
        };
        console.error("사용자 목록 조회 오류 상세:", errorInfo);

        var errorMessage = "사용자 목록 조회 중 오류가 발생했습니다.";

        // 오류 상태에 따른 메시지
        if (e.status === 404) {
            errorMessage = "사용자 목록을 찾을 수 없습니다. (404)";
        } else if (e.status === 500) {
            errorMessage = "서버 내부 오류가 발생했습니다. (500)";
        } else if (e.status === 403) {
            errorMessage = "사용자 목록에 접근할 권한이 없습니다. (403)";
        } else if (e.status === 401) {
            errorMessage = "로그인이 필요합니다. (401)";
        }

        // 오류 메시지 표시
        scwin.showErrorMessage(errorMessage);

        // 오류 발생 시 기본 데이터 설정
        scwin.setDefaultUserList();
    } catch (err) {
        console.error("오류 처리 중 추가 오류 발생:", err);
        scwin.setDefaultUserList();
    }
};

// 로그인 사용자 확인
scwin.checkLoginUser = function () {
    try {
        // URL 파라미터에서 사용자 ID 확인 - 가장 우선적으로 처리
        var urlParams = new URLSearchParams(window.location.search);
        var paramNames = ["userId", "user_id", "accountId", "id"];
        for (var i = 0; i < paramNames.length; i++) {
            var paramUserId = urlParams.get(paramNames[i]);
            if (paramUserId) {
                console.log("URL 파라미터에서 사용자 ID 확인: " + paramUserId);
                dma_searchParam.set("userId", parseInt(paramUserId, 10));
                return;
            }
        }

        // 기본값 설정 - 테스트용 (실제 환경에서는 적절히 수정 필요)
        console.log("URL에서 사용자 ID를 찾을 수 없어 기본값 사용");
        dma_searchParam.set("userId", 7); // 테스트용 ID 설정
    } catch (e) {
        console.error("사용자 확인 중 오류 발생: " + e.message);
        // 오류 발생시 기본값 설정
        dma_searchParam.set("userId", 7);
    }
};

// 이력서 정보 조회 버튼 클릭 이벤트
scwin.btn_getResumeInfo_onclick = function () {
    var userId = dma_searchParam.get("userId");
    if (!userId) {
        $c.win.alert("사용자 ID를 입력하세요.");
        return;
    }

    // 로딩 메시지 표시
    grp_message.show();
    grp_message.removeClass("error");
    grp_message.removeClass("success");
    grp_message.addClass("info");
    txt_message.setValue("이력서 정보를 조회하는 중입니다...");

    console.log("이력서 정보 조회 시작 - 사용자 ID:", userId);

    // URL 파라미터 방식으로 변경
    var apiUrl = "/InsWebApp/USGetResumeInfo.pwkjson?userId=" + userId;
    console.log("API URL: " + apiUrl);
    sbm_getResumeInfo.action = apiUrl;

    // 이력서 정보 조회 요청
    $c.sbm.execute($p, sbm_getResumeInfo);
};

// submission 전송 전 이벤트
scwin.sbm_getResumeInfo_submit = function (e) {
    console.log("이력서 정보 조회 요청 전 처리", e);

    // 필요한 파라미터 확인 및 설정
    var userId = dma_searchParam.get("userId");
    if (!userId) {
        console.error("사용자 ID가 없습니다");
        e.preventDefault();
        return false;
    }

    // URL 파라미터로 userId 전달하도록 URL 수정
    var apiUrl = "/InsWebApp/USGetResumeInfo.pwkjson?userId=" + userId;
    console.log("API URL 설정: " + apiUrl);

    // URL 수정
    sbm_getResumeInfo.action = apiUrl;

    return true;
};

// 이력서 정보 조회 완료 이벤트
scwin.sbm_getResumeInfo_submitdone = function (e) {
    console.log("이력서 정보 조회 완료", e);

    try {
        // 응답 확인
        if (!e || !e.responseJSON) {
            console.error("이력서 정보 응답 데이터가 없습니다.");
            scwin.showErrorMessage("서버 응답 데이터가 없습니다.");
            return;
        }

        // 응답 데이터를 데이터맵에 직접 매핑
        var responseData = e.responseJSON;
        console.log("이력서 정보 응답:", responseData);

        // 데이터맵 초기화
        // 모든 기존 데이터를 제거하고 빈 객체로 초기화
        dma_resumeInfo.setJSON({});

        // 응답 데이터를 데이터맵에 설정 (필수 필드만)
        var keysToSet = ["result", "hasResume", "resumeFileName", "displayName", "viewUrl", "message"];
        for (var i = 0; i < keysToSet.length; i++) {
            var key = keysToSet[i];
            if (responseData.hasOwnProperty(key)) {
                dma_resumeInfo.set(key, responseData[key]);
            }
        }

        // PDF 뷰어 초기화
        scwin.initPdfViewer();

        // 결과 메시지 표시
        var result = dma_resumeInfo.get("result");
        var hasResume = responseData.hasResume;
        var resumeFileName = responseData.resumeFileName;
        var message = responseData.message;

        // 이력서 존재 여부 판단 로직
        if (responseData.result === "success" && (responseData.hasResume === true || responseData.resumeFileName)) {
            // 이력서가 있는 경우
            grp_noResume.hide();
            grp_resumeInfo.show();

            // 파일명 클릭 이벤트 설정
            var displayName = responseData.displayName;
            var viewUrl = responseData.viewUrl;

            txt_resumeFileName.setValue(displayName || "이력서.pdf");

            // 성공 메시지 표시
            grp_message.show();
            grp_message.removeClass("error");
            grp_message.addClass("success");
            txt_message.setValue("이력서 정보를 성공적으로 조회했습니다.");

            // 3초 후 메시지 숨기기
            setTimeout(function () {
                grp_message.hide();
            }, 3000);
        } else {
            // 이력서가 없는 경우
            grp_resumeInfo.hide();
            grp_noResume.show();

            // 메시지 표시
            var noResumeMessage = "등록된 이력서가 없습니다.";
            if (message) {
                noResumeMessage = message;
            } else if (result === "fail") {
                noResumeMessage = "이력서 정보 조회 중 오류가 발생했습니다.";
            }

            txt_noResumeMessage.setValue(noResumeMessage);

            // 정보 메시지 표시
            grp_message.show();
            grp_message.removeClass("error");
            grp_message.removeClass("success");
            grp_message.addClass("info");
            txt_message.setValue(noResumeMessage);

            // 3초 후 메시지 숨기기
            setTimeout(function () {
                grp_message.hide();
            }, 3000);
        }
    } catch (err) {
        console.error("이력서 정보 처리 중 오류:", err);
        scwin.showErrorMessage("이력서 정보 처리 중 오류가 발생했습니다: " + err.message);
    }
};

// 숫자 앞에 0 붙이기 (날짜 포맷팅용)
function padZero(num) {
    return (num < 10 ? "0" : "") + num;
}

// 이력서 정보 조회 오류 이벤트
scwin.sbm_getResumeInfo_submiterror = function (e) {
    console.error("이력서 정보 조회 오류", e);

    try {
        // 오류 상세 정보 로깅
        var errorInfo = {
            status: e.status,
            statusText: e.statusText,
            responseText: e.responseText
        };
        console.error("이력서 정보 조회 오류 상세:", errorInfo);

        // 오류 메시지 표시
        grp_resumeInfo.hide();
        grp_noResume.show();

        var errorMessage = "이력서 정보 조회 중 오류가 발생했습니다.";

        // 오류 상태에 따른 메시지
        if (e.status === 404) {
            errorMessage = "이력서 정보를 찾을 수 없습니다. (404)";
        } else if (e.status === 500) {
            errorMessage = "서버 내부 오류가 발생했습니다. (500)";
        } else if (e.status === 403) {
            errorMessage = "이력서 정보에 접근할 권한이 없습니다. (403)";
        } else if (e.status === 401) {
            errorMessage = "로그인이 필요합니다. (401)";
        }

        txt_noResumeMessage.setValue(errorMessage);

        // 오류 메시지 표시
        scwin.showErrorMessage(errorMessage);

        // 디버그 정보 콘솔에 출력
        scwin.showDebugInfo();
    } catch (err) {
        console.error("오류 처리 중 추가 오류 발생:", err);
    }
};

// PDF 뷰어 초기화
scwin.initPdfViewer = function () {
    // 기존 iframe 내용 제거
    var iframeElement = document.getElementById("ifm_pdfViewer");
    if (iframeElement) {
        iframeElement.src = "about:blank";
    }

    // PDF 뷰어 영역 숨기기
    grp_pdfViewer.hide();
};

// PDF 파일 보기
scwin.viewPdf = function () {
    // 응답 데이터에서 직접 URL 가져오기
    var viewUrl = dma_resumeInfo.get("viewUrl");
    if (!viewUrl) {
        $c.win.alert("PDF 파일 URL이 없습니다.");
        return;
    }

    // 절대 경로로 변환
    if (viewUrl.startsWith("//")) {
        viewUrl = window.location.protocol + viewUrl;
    } else if (!viewUrl.startsWith("http") && !viewUrl.startsWith("/")) {
        viewUrl = "/" + viewUrl;
    }

    // 컨텍스트 경로 추가 (필요시)
    if (!viewUrl.startsWith("/InsWebApp/") && !viewUrl.startsWith("http")) {
        viewUrl = "/InsWebApp" + viewUrl;
    }

    // URL에 파일 경로 파라미터가 있는지 확인하고, 없으면 추가
    var resumeFileName = dma_resumeInfo.get("resumeFileName");
    if (!viewUrl.includes("filePath=") && resumeFileName) {
        viewUrl = "/InsWebApp/USViewResume.pwkjson?filePath=" + resumeFileName;
    }

    console.log("PDF 뷰어 URL: " + viewUrl);

    // 현재 페이지의 기본 URL 가져오기
    var baseUrl = window.location.protocol + "//" + window.location.host;
    var fullUrl = "";

    // URL이 상대 경로인지 절대 경로인지 확인
    if (viewUrl.startsWith("http")) {
        fullUrl = viewUrl;
    } else {
        fullUrl = baseUrl + viewUrl;
    }

    console.log("PDF 뷰어 전체 URL: " + fullUrl);

    // PDF 뷰어에 URL 설정
    ifm_pdfViewer.setSrc(fullUrl);

    // PDF 뷰어 영역 표시
    grp_pdfViewer.show();
};

// 새 창에서 PDF 보기
scwin.openPdfInNewWindow = function () {
    // 응답 데이터에서 직접 URL 가져오기
    var viewUrl = dma_resumeInfo.get("viewUrl");
    if (!viewUrl) {
        $c.win.alert("PDF 파일 URL이 없습니다.");
        return;
    }

    // 절대 경로로 변환
    if (viewUrl.startsWith("//")) {
        viewUrl = window.location.protocol + viewUrl;
    } else if (!viewUrl.startsWith("http") && !viewUrl.startsWith("/")) {
        viewUrl = "/" + viewUrl;
    }

    // 컨텍스트 경로 추가 (필요시)
    if (!viewUrl.startsWith("/InsWebApp/") && !viewUrl.startsWith("http")) {
        viewUrl = "/InsWebApp" + viewUrl;
    }

    // URL에 userId 파라미터가 있는지 확인하고, 없으면 추가
    var userId = dma_searchParam.get("userId");
    var resumeFileName = dma_resumeInfo.get("resumeFileName");

    if (!viewUrl.includes("filePath=") && resumeFileName) {
        // URL에 파일 경로 파라미터가 없는 경우 추가
        viewUrl = "/InsWebApp/USViewResume.pwkjson?filePath=" + resumeFileName;
    }

    // 현재 페이지의 기본 URL 가져오기
    var baseUrl = window.location.protocol + "//" + window.location.host;
    var fullUrl = "";

    // URL이 상대 경로인지 절대 경로인지 확인
    if (viewUrl.startsWith("http")) {
        fullUrl = viewUrl;
    } else {
        fullUrl = baseUrl + viewUrl;
    }

    // 새 창에서 PDF 열기
    window.open(fullUrl, "_blank");
};

// 사용자 선택 변경 이벤트
scwin.sel_user_onchange = function () {
    var selectedUserId = sel_user.getValue();
    if (selectedUserId) {
        dma_searchParam.set("userId", parseInt(selectedUserId, 10));

        // 사용자 변경 시 자동으로 이력서 정보 조회
        scwin.btn_getResumeInfo_onclick();
    }
};

// 디버그 정보 표시 함수
scwin.showDebugInfo = function () {
    console.log("=== 디버그 정보 ===");

    // 현재 사용자 ID
    var userId = dma_searchParam.get("userId");
    console.log("현재 사용자 ID:", userId);

    // 이력서 정보
    var resumeInfo = {
        result: dma_resumeInfo.get("result"),
        hasResume: dma_resumeInfo.get("hasResume"),
        resumeFileName: dma_resumeInfo.get("resumeFileName"),
        displayName: dma_resumeInfo.get("displayName"),
        viewUrl: dma_resumeInfo.get("viewUrl"),
        message: dma_resumeInfo.get("message")
    };
    console.log("이력서 정보:", resumeInfo);

    // 현재 URL 정보
    console.log("현재 URL:", window.location.href);
    console.log("기본 URL:", window.location.href.split('?')[0].split('/websquare.html')[0] + '/');

    // 사용자 목록 정보
    var userList = dlt_userList.getAllJSON();
    console.log("사용자 목록:", userList);

    // 브라우저 정보
    console.log("브라우저:", navigator.userAgent);

    // 현재 상태 표시
    var debugMessage = "사용자 ID: " + userId +
        "\n이력서 존재: " + (resumeInfo.hasResume ? "O" : "X") +
        "\n파일명: " + (resumeInfo.resumeFileName || "없음") +
        "\n메시지: " + (resumeInfo.message || "없음");

    $c.win.alert("디버그 정보\n\n" + debugMessage);

    return resumeInfo;
};

// 디버그 버튼 클릭 이벤트
scwin.btn_debug_onclick = function () {
    scwin.showDebugInfo();
};

// 오류 메시지 표시 함수
scwin.showErrorMessage = function (message) {
    grp_message.show();
    grp_message.removeClass("success");
    grp_message.removeClass("info");
    grp_message.addClass("error");
    txt_message.setValue(message || "오류가 발생했습니다.");

    console.error("오류 메시지:", message);

    // 5초 후 메시지 숨기기
    setTimeout(function () {
        grp_message.hide();
    }, 5000);
};
]]></script>
    </head>
    
    <body ev:onpageload="scwin.onpageload">
        <w2:wframe src="../common/Header.xml" id="headerFrame" />
        <xf:group class="main-container">
            <!-- 메시지 영역 -->
            <xf:group class="message success" id="grp_message" style="display:none;">
                <w2:textbox id="txt_message" label=""></w2:textbox>
            </xf:group>
            
            <xf:group class="section">
                <w2:textbox class="section-title" label="이력서 PDF 뷰어 테스트" />
                
                <!-- 검색 영역 -->
                <xf:group class="form-group">
                    <w2:textbox class="form-label" label="사용자 선택"></w2:textbox>
                    <xf:select1 id="sel_user" ref="data:dma_searchParam.userId" class="form-select" appearance="minimal" 
                        ev:onchange="scwin.sel_user_onchange">
                        <xf:choices>
                            <xf:itemset nodeset="data:dlt_userList">
                                <xf:label ref="name"></xf:label>
                                <xf:value ref="userId"></xf:value>
                            </xf:itemset>
                        </xf:choices>
                    </xf:select1>
                </xf:group>
                
                <xf:group class="form-group">
                    <w2:textbox class="form-label" label="사용자 ID"></w2:textbox>
                    <xf:input id="ibx_userId" ref="data:dma_searchParam.userId" class="form-input" placeholder="사용자 ID를 입력하세요"></xf:input>
                    <xf:trigger id="btn_getResumeInfo" class="form-button" type="button" ev:onclick="scwin.btn_getResumeInfo_onclick">
                        <xf:label>이력서 정보 조회</xf:label>
                    </xf:trigger>
                    <xf:trigger id="btn_debug" class="form-button" type="button" ev:onclick="scwin.btn_debug_onclick" style="background-color: #6c757d;">
                        <xf:label>디버그</xf:label>
                    </xf:trigger>
                </xf:group>
            </xf:group>
            
            <!-- 결과 영역 - 이력서 있음 -->
            <xf:group class="section" id="grp_resumeInfo" style="display:none;">
                <w2:textbox class="section-title" label="이력서 정보" />
                
                <xf:group class="result-area">
                    <xf:group class="result-item">
                        <w2:textbox class="result-label" label="파일명"></w2:textbox>
                        <w2:anchor id="txt_resumeFileName" class="file-link" outerDiv="false" ev:onclick="scwin.viewPdf">
                            <xf:label>이력서.pdf</xf:label>
                        </w2:anchor>
                    </xf:group>
                    
                    <xf:group class="result-item" style="margin-top:16px;">
                        <xf:trigger id="btn_viewPdf" class="form-button" type="button" ev:onclick="scwin.viewPdf" style="margin-left:0;">
                            <xf:label>PDF 뷰어에서 보기</xf:label>
                        </xf:trigger>
                        <xf:trigger id="btn_openPdf" class="form-button" type="button" ev:onclick="scwin.openPdfInNewWindow">
                            <xf:label>새 창에서 보기</xf:label>
                        </xf:trigger>
                    </xf:group>
                </xf:group>
            </xf:group>
            
            <!-- 결과 영역 - 이력서 없음 -->
            <xf:group class="section" id="grp_noResume" style="display:none;">
                <w2:textbox class="section-title" label="이력서 정보" />
                
                <xf:group class="message info">
                    <w2:textbox id="txt_noResumeMessage" label="등록된 이력서가 없습니다."></w2:textbox>
                </xf:group>
            </xf:group>
            
            <!-- PDF 뷰어 영역 -->
            <xf:group class="section" id="grp_pdfViewer" style="display:none;">
                <w2:textbox class="section-title" label="PDF 뷰어" />
                
                <xf:group class="pdf-viewer">
                    <w2:iframe id="ifm_pdfViewer" class="pdf-iframe" src=""></w2:iframe>
                </xf:group>
            </xf:group>
        </xf:group>
    </body>
</html> 