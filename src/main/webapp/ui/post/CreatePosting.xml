<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:w2="http://www.inswave.com/websquare" 
    xmlns:xf="http://www.w3.org/2002/xforms">
    
    <head meta_screenName="회사 메인페이지">
        <w2:type>COMPONENT</w2:type>
        <w2:buildDate/>
        <w2:MSA/>
        <xf:model>
            <w2:dataCollection baseNode="map">
            	<w2:dataList baseNode="list" repeatNode="map" id="dlt_techstack" saveRemovedData="true">
            		<w2:columnInfo>
            			<w2:column dataType="text" name="techstack" id="techstack"></w2:column>
            		</w2:columnInfo>
            	</w2:dataList>
            	<w2:dataMap baseNode="map" id="dmp_postVo" style="">
            		<w2:keyInfo>
            			<w2:key dataType="text" id="jobPostingId" name="job_posting_id"></w2:key>
            			<w2:key dataType="text" id="companyId" name="company_id"></w2:key>
            			<w2:key dataType="text" id="title" name="title"></w2:key>
            			<w2:key dataType="text" id="description" name="description"></w2:key>
            			<w2:key dataType="text" id="requiredSkills" name="required_skills"></w2:key>
            			<w2:key dataType="text" id="experienceLevel" name="experience_level"></w2:key>
            			<w2:key dataType="text" id="salaryRange" name="salary_range"></w2:key>
            			<w2:key dataType="text" id="location" name="location"></w2:key>
            			<w2:key dataType="text" id="workType" name="work_type"></w2:key>
            			<w2:key dataType="text" id="preferredDeveloperTypes" name="preferred_developer_types"></w2:key>
            			<w2:key dataType="text" id="expiresAt" name="expires_at"></w2:key>
            			<w2:key dataType="text" id="postedAt" name="posted_at"></w2:key>
            			<w2:key dataType="text" id="status" name="status"></w2:key>
            		</w2:keyInfo>
            	</w2:dataMap>
            </w2:dataCollection>
            <w2:workflowCollection/>
            
            <xf:submission id="sbm_insertPost" ref='data:json,{"id":"dmp_postVo","key":"postVo"}' target="" action="/InsWebApp/POS0001Ins.pwkjson" method="post"
            	mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="공고를 등록 중입니다."
            	ev:submit="" ev:submitdone="scwin.sbm_insertPost_submitdone" ev:submiterror="" abortTrigger="">
            </xf:submission>
        </xf:model>
        <w2:layoutInfo/>
        <w2:publicInfo method=""/>
        
        <style type="text/css"><![CDATA[
            /* 전체 컨테이너 스타일 */
            .main-container {
                background-color: #ffffff;
                min-height: 100vh;
                padding: 40px 20px;
                max-width: 500px;
                margin: 0 auto;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }
            
            /* 페이지 제목 스타일 */
            .page-title {
                text-align: center;
                margin-bottom: 60px;
            }
            
            .main-title {
                font-size: 28px;
                font-weight: 700;
                color: #333;
                margin: 0;
                letter-spacing: -0.5px;
            }
            
            .page-subtitle {
                font-size: 16px;
                color: #666;
                margin: 8px 0 0 0;
                letter-spacing: -0.2px;
            }
            
            /* 섹션 스타일 */
            .form-section {
                background-color: #ffffff;
                border-radius: 16px;
                padding: 30px 24px;
                margin-bottom: 32px;
                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                border: 1px solid #f1f3f4;
            }
            
            .section-title {
                font-size: 20px;
                font-weight: 700;
                color: #333;
                margin-bottom: 32px;
                letter-spacing: -0.4px;
            }
            
            /* 폼 그룹 스타일 */
            .form-group {
                margin-bottom: 32px;
                position: relative;
            }
            
            .form-group.half {
                flex: 0 0 calc(50% - 10px);
            }
            
            .form-row {
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
                align-items: flex-start;
            }
            
            .form-label {
                display: block;
                font-size: 16px;
                font-weight: 600;
                color: #333;
                margin-bottom: 12px;
                letter-spacing: -0.3px;
            }
            
            /* 입력 필드 스타일 */
            .form-input {
                width: 100%;
                height: 56px;
                padding: 0 16px;
                border: 2px solid #e5e7eb;
                border-radius: 12px;
                font-size: 16px;
                color: #333;
                background-color: #ffffff;
                transition: all 0.2s ease;
                box-sizing: border-box;
            }
            
            .form-input:focus {
                outline: none;
                border-color: #3b82f6;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }
            
            .form-input::placeholder {
                color: #9ca3af;
                font-weight: 400;
            }
            
            /* 선택 박스 스타일 */
            .form-select {
                width: 200px !important;
                height: 56px !important;
                padding: 0 16px !important;
                border: 2px solid #e5e7eb !important;
                border-radius: 12px !important;
                font-size: 16px !important;
                color: #333 !important;
                background-color: #ffffff !important;
                background-position: right 16px center !important;
                background-repeat: no-repeat !important;
                background-size: 16px !important;
                appearance: none !important;
                cursor: pointer !important;
                transition: all 0.2s ease !important;
                box-sizing: border-box !important;
            }
            
            .form-select:focus {
                outline: none !important;
                border-color: #3b82f6 !important;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
            }
            
            /* AutoComplete 스타일 */
            .w2-autocomplete-container {
                width: 100% !important;
            }
            
            .w2-autocomplete-container input {
                width: 100% !important;
                height: 56px !important;
                padding: 0 16px !important;
                border: 2px solid #e5e7eb !important;
                border-radius: 12px !important;
                font-size: 16px !important;
                color: #333 !important;
                background-color: #ffffff !important;
                transition: all 0.2s ease !important;
                box-sizing: border-box !important;
            }
            
            .w2-autocomplete-container input:focus {
                outline: none !important;
                border-color: #3b82f6 !important;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
            }
            
            /* 체크 콤보박스 스타일 */
            .w2-checkcombobox-container {
                width: 100% !important;
            }
            
            .w2-checkcombobox-container .w2-checkcombobox-input {
                width: 100% !important;
                height: 56px !important;
                padding: 0 16px !important;
                border: 2px solid #e5e7eb !important;
                border-radius: 12px !important;
                font-size: 16px !important;
                color: #333 !important;
                background-color: #ffffff !important;
                transition: all 0.2s ease !important;
                box-sizing: border-box !important;
            }
            
            /* 텍스트 영역 스타일 */
            .form-textarea {
                width: 100%;
                min-height: 120px;
                padding: 16px;
                border: 2px solid #e5e7eb;
                border-radius: 12px;
                font-size: 16px;
                color: #333;
                background-color: #ffffff;
                font-family: inherit;
                resize: vertical;
                transition: all 0.2s ease;
                box-sizing: border-box;
            }
            
            .form-textarea:focus {
                outline: none;
                border-color: #3b82f6;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }
            
            .form-textarea::placeholder {
                color: #9ca3af;
                font-weight: 400;
            }
            
            /* 버튼 그리드 스타일 */
            .button-grid {
                display: grid;
                grid-template-columns: repeat(4, 1fr);
                gap: 12px;
                margin: 20px 0;
            }
            
            .personality-btn {
                padding: 16px 12px;
                border: 2px solid #e5e7eb;
                background: #ffffff;
                border-radius: 12px;
                cursor: pointer;
                text-align: center;
                font-size: 14px;
                font-weight: 600;
                color: #4b5563;
                transition: all 0.2s ease;
                position: relative;
                width: 100%;
                min-width: 80px;  
                min-height: 48px;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .personality-btn:hover {
                border-color: #3b82f6;
                background-color: #f8fafc;
            }
            
            .personality-btn.selected {
                background-color: #3b82f6;
                color: white;
                border-color: #3b82f6;
            }
            
            /* 도움말 텍스트 */
            .help-text {
                font-size: 14px;
                color: #6b7280;
                margin-top: 8px;
                line-height: 1.5;
            }
            
            /* 버튼 스타일 */
            .button-container {
                display: flex;
                gap: 12px;
                margin-top: 60px;
                padding: 0 4px;
            }
            
            .btn-cancel {
                flex: 1;
                height: 56px;
                border: 2px solid #e5e7eb;
                border-radius: 12px;
                background-color: #ffffff;
                color: #6b7280;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .btn-cancel:hover {
                border-color: #d1d5db;
                color: #374151;
            }
            
            .btn-primary {
                flex: 1;
                height: 56px;
                border: none;
                border-radius: 12px;
                background-color: #3b82f6;
                color: #ffffff;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .btn-primary:hover {
                background-color: #2563eb;
            }
            
            .btn-primary:disabled {
                background-color: #e5e7eb;
                color: #9ca3af;
                cursor: not-allowed;
            }

            /* Generator 컨테이너 스타일 */
            .selected-techstack-container {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                min-height: 20px;
                margin-top: 12px;
            }

            /* 기술스택 태그 스타일 */
            .techstack-tag {
                display: inline-flex;
                align-items: center;
                background-color: #e0f2fe;
                border: 1px solid #b3e5fc;
                border-radius: 20px;
                padding: 6px 12px;
                font-size: 14px;
                color: #0277bd;
                gap: 8px;
                margin: 2px;
            }

            .techstack-text {
                font-weight: 500;
                line-height: 1;
                border: none !important;
                background: transparent !important;
                padding: 0 !important;
                margin: 0 !important;
                height: auto !important;
                width: auto !important;
                color: #0277bd !important;
            }

            /* 제거 버튼 스타일 */
            .techstack-remove-btn {
                background: none !important;
                border: none !important;
                color: #0277bd !important;
                cursor: pointer !important;
                font-size: 18px !important;
                font-weight: bold !important;
                line-height: 1 !important;
                padding: 0 !important;
                width: 18px !important;
                height: 18px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
                border-radius: 50% !important;
                transition: all 0.2s ease !important;
            }

            .techstack-remove-btn:hover {
                background-color: #b3e5fc !important;
                color: #01579b !important;
            }
            
            /* 반응형 디자인 */
            @media (max-width: 480px) {
                .main-container {
                    padding: 20px 16px;
                }
                
                .main-title {
                    font-size: 24px;
                }
                
                .form-section {
                    padding: 24px 20px;
                    margin-bottom: 24px;
                }
                
                .button-grid {
                    grid-template-columns: 1fr;
                }
            }
        ]]></style>
        
        <script lazy="false" type="text/javascript"><![CDATA[scwin.onpageload = function () {

};

scwin.main_logo_onclick = function (e) {
};

// 기술스택 추가이벤트
scwin.select_techstack_onchange = function () {
    var selectedValue = select_techstack.getValue();
    
    console.log("선택된 값:", selectedValue);
    
    // 선택된 값이 없으면 리턴
    if (!selectedValue || selectedValue === "" || selectedValue === "기술스택을 선택하세요") {
        return;
    }

    // 해당 기술스택이 이미 있는지 확인
    var matchedData = dlt_techstack.getMatchedJSON("techstack", selectedValue);

    if(matchedData.length == 0){
        // 데이터리스트에 새 항목 추가
        var newRowIndex = dlt_techstack.insertRow();
        dlt_techstack.setCellData(newRowIndex, "techstack", selectedValue);
        gen_techstack.refresh();
        
        console.log("기술스택 추가됨:", selectedValue);
    } else {
        console.log("이미 존재하는 기술스택:", selectedValue);
    }
    
    console.log("현재 기술스택 개수:", dlt_techstack.getRowCount());
    
    // AutoComplete 초기화 (이벤트 루프 방지)
    setTimeout(function() {
        select_techstack.setValue("");
    }, 100);
};

// 개별 기술스택 제거 함수 (Generator 내부에서 호출)
scwin.removeTechStack = function(rowIndex) {
    try {
        
        // 데이터리스트에서 해당 행 삭제
        dlt_techstack.removeRow(rowIndex);
        
        gen_techstack.refresh();
        
        console.log("기술스택 제거 완료, 인덱스:", rowIndex);
    } catch (error) {
        console.error("기술스택 제거 중 오류:", error);
    }
};

scwin.personality_btn_onclick = function (e) {
    // 성향 버튼 선택 토글
    var btn = e.target;
    btn.classList.contains('selected') 
        ? btn.classList.remove('selected') 
        : btn.classList.add('selected');
};

scwin.btn_cancel_posting_onclick = function (e) {
    if (window.history.length > 1) {
        window.history.back();          
    } 
    else {
        $p.url("RecruitmentDashboard.xml");
    }
};

scwin.btn_create_posting_onclick = function (e) {
    console.log("=== 등록 버튼 클릭됨 ===");
    
    // 필수 값들 검증
    if (!dmp_postVo.get("title") || dmp_postVo.get("title").trim() === "") {
        alert("공고 제목을 입력해주세요.");
        return;
    }
    
    if (!dmp_postVo.get("location") || dmp_postVo.get("location").trim() === "") {
        alert("근무 지역을 선택해주세요.");
        return;
    }
    
    if (!dmp_postVo.get("workType") || dmp_postVo.get("workType").trim() === "") {
        alert("근무 형태를 선택해주세요.");
        return;
    }
    
    if (!dmp_postVo.get("description") || dmp_postVo.get("description").trim() === "") {
        alert("인재상 상세 설명을 입력해주세요.");
        return;
    }
    
    console.log("=== 모든 필수 필드 검증 통과 ===");
    
    // 기본 confirm으로 확인
    if (confirm("공고를 등록하시겠습니까?")) {
        console.log("=== 사용자가 확인 버튼 클릭 ===");
        
        // 기본 값들 설정
        var currentDate = new Date();
        var dateString = currentDate.getFullYear() + '-' + 
                         String(currentDate.getMonth() + 1).padStart(2, '0') + '-' + 
                         String(currentDate.getDate()).padStart(2, '0') + ' ' +
                         String(currentDate.getHours()).padStart(2, '0') + ':' +
                         String(currentDate.getMinutes()).padStart(2, '0') + ':' +
                         String(currentDate.getSeconds()).padStart(2, '0');
        
        // 만료일 설정 (30일 후)
        var expiryDate = new Date(currentDate);
        expiryDate.setDate(expiryDate.getDate() + 30);
        var expiryString = expiryDate.getFullYear() + '-' + 
                          String(expiryDate.getMonth() + 1).padStart(2, '0') + '-' + 
                          String(expiryDate.getDate()).padStart(2, '0') + ' ' +
                          String(expiryDate.getHours()).padStart(2, '0') + ':' +
                          String(expiryDate.getMinutes()).padStart(2, '0') + ':' +
                          String(expiryDate.getSeconds()).padStart(2, '0');
        
        console.log("=== 날짜 설정 완료 ===");
        console.log("현재시간:", dateString);
        console.log("만료시간:", expiryString);
        
        // 데이터 설정 (job_posting_id는 AUTO_INCREMENT이므로 제외)
        dmp_postVo.set("companyId", 1); // 숫자로 설정 (실제로는 로그인 사용자의 회사 ID)
        dmp_postVo.set("postedAt", dateString);
        dmp_postVo.set("expiresAt", expiryString);
        dmp_postVo.set("status", "active"); // ENUM 값에 맞게 소문자
        
        // 선택된 기술스택들을 JSON 배열로 변환하여 requiredSkills에 저장
        var techStackArray = [];
        for(var i = 0; i < dlt_techstack.getRowCount(); i++) {
            techStackArray.push(dlt_techstack.getCellData(i, "techstack"));
        }
        dmp_postVo.set("requiredSkills", JSON.stringify(techStackArray)); // JSON 문자열로 저장
        
        // 선택된 성향 버튼들을 JSON 배열로 변환하여 preferredDeveloperTypes에 저장
        var selectedPersonalities = [];
        var personalityBtns = document.querySelectorAll('.personality-btn.selected');
        personalityBtns.forEach(function(btn) {
            var personality = btn.textContent.trim();
            if (personality && personality !== "") {
                selectedPersonalities.push(personality);
            }
        });
        dmp_postVo.set("preferredDeveloperTypes", JSON.stringify(selectedPersonalities)); // JSON 문자열로 저장
        
        console.log("등록할 데이터 - 제목:", dmp_postVo.get("title"));
        console.log("등록할 데이터 - 지역:", dmp_postVo.get("location"));
        console.log("등록할 데이터 - 기술스택:", dmp_postVo.get("requiredSkills"));
        console.log("등록할 데이터 - 성향:", dmp_postVo.get("preferredDeveloperTypes"));
        console.log("등록할 데이터 - 상태:", dmp_postVo.get("status"));
        
        console.log("=== 서버 통신 시작 ===");
        
        // 웹스퀘어 submission 올바른 실행 방법들 시도
        try {
            console.log("=== 웹스퀘어 submission 실행 시작 ===");
            
            var submission = $p.getComponentById("sbm_insertPost");
            console.log("submission 객체 확인:", submission);
            
            if (submission) {
                // 웹스퀘어 submission 실행 방법들 순차 시도
                var success = false;
                
                // 방법 1: 웹스퀘어 표준 - triggering event
                try {
                    console.log("방법1: XForm event trigger 시도...");
                    // XForm submission의 submit 이벤트 트리거
                    var submitEvent = document.createEvent('Event');
                    submitEvent.initEvent('submit', true, true);
                    submission.xmlNode.dispatchEvent(submitEvent);
                    console.log("방법1 성공: XForm event trigger");
                    success = true;
                } catch (error1) {
                    console.log("방법1 실패:", error1.message);
                    
                    // 방법 2: 웹스퀘어 API - $p.executeSubmission
                    try {
                        console.log("방법2: $p.executeSubmission 시도...");
                        $p.executeSubmission("sbm_insertPost");
                        console.log("방법2 성공: $p.executeSubmission");
                        success = true;
                    } catch (error2) {
                        console.log("방법2 실패:", error2.message);
                        
                        // 방법 3: submission 객체의 내부 메서드 직접 호출
                        try {
                            console.log("방법3: submission 내부 실행 시도...");
                            console.log("submission 사용 가능한 모든 속성:", Object.getOwnPropertyNames(submission));
                            console.log("submission 프로토타입:", Object.getOwnPropertyNames(Object.getPrototypeOf(submission)));
                            
                            // submission의 실제 submit 메서드 찾기
                            if (submission._submit) {
                                submission._submit();
                                console.log("방법3-1 성공: _submit");
                                success = true;
                            } else if (submission.doSubmit) {
                                submission.doSubmit();
                                console.log("방법3-2 성공: doSubmit");
                                success = true;
                            } else if (submission.requestSubmit) {
                                submission.requestSubmit();
                                console.log("방법3-3 성공: requestSubmit");
                                success = true;
                            } else if (submission.execute) {
                                submission.execute();
                                console.log("방법3-4 성공: execute");
                                success = true;
                            } else {
                                throw new Error("사용 가능한 실행 메서드 없음");
                            }
                        } catch (error3) {
                            console.log("방법3 실패:", error3.message);
                            
                            // 방법 4: DOM에서 submission 폼 직접 submit
                            try {
                                console.log("방법4: DOM submit 시도...");
                                // submission이 연결된 form 요소 찾기
                                var form = document.querySelector('form') || document.body;
                                var submitEvent = new Event('submit', { bubbles: true, cancelable: true });
                                form.dispatchEvent(submitEvent);
                                console.log("방법4 성공: DOM submit");
                                success = true;
                            } catch (error4) {
                                console.log("방법4 실패:", error4.message);
                                throw new Error("모든 submission 실행 방법 실패");
                            }
                        }
                    }
                }
                
                if (success) {
                    console.log("=== submission 실행 완료 - 서버 응답 대기 중 ===");
                }
                
            } else {
                throw new Error("submission 객체를 찾을 수 없습니다");
            }
            
        } catch (error) {
            console.error("submission 실행 최종 오류:", error);
            console.error("오류 스택:", error.stack);
            alert("서버 통신 중 오류가 발생했습니다: " + error.message);
        }
    } else {
        console.log("=== 사용자가 취소 버튼 클릭 ===");
    }
};

scwin.sbm_insertPost_submitdone = function(e) {
    console.log("=== 서버 응답 수신 ===");
    console.log("응답 전체:", e);
    console.log("응답 JSON:", e.responseJSON);
    
    // error 수신시
    var elHeader = e.responseJSON ? e.responseJSON.elHeader : null;
    console.log("elHeader:", elHeader);
    
    if(elHeader == null || elHeader == "" || elHeader == "undefined" || elHeader.resSuc == false) {
        var errorCode = elHeader ? elHeader.resCode : "Unknown";
        var errorMsg = elHeader ? elHeader.resMsg : "서버 응답 없음";
        
        console.error("서버 에러 - 코드:", errorCode, "메시지:", errorMsg);
        $c.win.alert(`에러코드 : ${errorCode}\n에러메시지 : ${errorMsg}`);
        return false;
    } else {
        console.log("=== 등록 성공 ===");
        // 등록되었습니다. msg 출력
        $c.win.alert("공고가 등록되었습니다.");
        // 등록 후 대시보드로 이동
        $p.url("../corporate/RecruitmentDashboard.xml");
    }
};]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload">
        <xf:group class="main-container">
        	<!-- 페이지 제목 -->
        	<xf:group class="page-title">
        		<w2:textbox class="main-title" label="공고 등록"></w2:textbox>
        		<w2:textbox class="page-subtitle" label="우리 회사의 문화와 원하는 인재상을 입력해주세요"></w2:textbox>
        	</xf:group>

        	<!-- 기본 정보 섹션 -->
        	<section class="form-section">
        		<w2:textbox class="section-title" label="기본 정보"></w2:textbox>
        		
        		<xf:group class="form-group">
        			<w2:textbox class="form-label" label="공고 제목"></w2:textbox>
        			<xf:input class="form-input" placeholder="매력적인 공고 제목을 입력해주세요" ref="data:dmp_postVo.title"></xf:input>
        		</xf:group>
        		
        		<xf:group class="form-row">
        			<xf:group class="form-group half">
        				<w2:textbox class="form-label" label="근무 지역"></w2:textbox>
        				<xf:select1 class="form-select" chooseOption="지역 선택" appearance="minimal" ref="data:dmp_postVo.location">
        					<xf:choices>
        						<xf:item>
        							<xf:label><![CDATA[서울]]></xf:label>
        							<xf:value><![CDATA[서울]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[경기]]></xf:label>
        							<xf:value><![CDATA[경기]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[인천]]></xf:label>
        							<xf:value><![CDATA[인천]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[부산]]></xf:label>
        							<xf:value><![CDATA[부산]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[대구]]></xf:label>
        							<xf:value><![CDATA[대구]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[대전]]></xf:label>
        							<xf:value><![CDATA[대전]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[광주]]></xf:label>
        							<xf:value><![CDATA[광주]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[원격근무]]></xf:label>
        							<xf:value><![CDATA[원격근무]]></xf:value>
        						</xf:item>
        					</xf:choices>
        				</xf:select1>
        			</xf:group>
        			
        			<xf:group class="form-group half">
        				<w2:textbox class="form-label" label="근무 형태"></w2:textbox>
        				<xf:select1 class="form-select" chooseOption="형태 선택" appearance="minimal" ref="data:dmp_postVo.workType">
        					<xf:choices>
        						<xf:item>
        							<xf:label><![CDATA[원격 근무]]></xf:label>
        							<xf:value><![CDATA[remote]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[출근 근무]]></xf:label>
        							<xf:value><![CDATA[onsite]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[하이브리드]]></xf:label>
        							<xf:value><![CDATA[hybrid]]></xf:value>
        						</xf:item>
        					</xf:choices>
        				</xf:select1>
        			</xf:group>
        		</xf:group>
        	</section>

        	<!-- 개발 환경 및 기술 스택 섹션 -->
        	<section class="form-section">
        		<w2:textbox class="section-title" label="개발 환경 및 기술 스택"></w2:textbox>

        		<xf:group class="form-group">
        			<w2:textbox class="form-label" label="주요 기술 스택"></w2:textbox>
        			<w2:autoComplete editType="select" id="select_techstack" style="width:100%;height:56px;" submenuSize="auto"
        				search="start" allOption="" chooseOption="true" ref="" chooseOptionLabel="기술스택을 선택하세요"
        				ev:onchange="scwin.select_techstack_onchange">
        				<w2:choices>
        					<w2:item>
        						<w2:label><![CDATA[Java]]></w2:label>
        						<w2:value><![CDATA[Java]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[JavaScript]]></w2:label>
        						<w2:value><![CDATA[JavaScript]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[Python]]></w2:label>
        						<w2:value><![CDATA[Python]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[React]]></w2:label>
        						<w2:value><![CDATA[React]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[Spring Boot]]></w2:label>
        						<w2:value><![CDATA[Spring Boot]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[Node.js]]></w2:label>
        						<w2:value><![CDATA[Node.js]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[MySQL]]></w2:label>
        						<w2:value><![CDATA[MySQL]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[MongoDB]]></w2:label>
        						<w2:value><![CDATA[MongoDB]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[Docker]]></w2:label>
        						<w2:value><![CDATA[Docker]]></w2:value>
        					</w2:item>
        					<w2:item>
        						<w2:label><![CDATA[Kubernetes]]></w2:label>
        						<w2:value><![CDATA[Kubernetes]]></w2:value>
        					</w2:item>
        				</w2:choices>
        			</w2:autoComplete>

        			<!-- 선택된 기술스택 표시 영역 (Generator 사용) -->
        			<xf:group class="selected-techstack-container">
        				<w2:generator id="gen_techstack" dataList="data:dlt_techstack" style="display: contents;">
        					<xf:group class="techstack-tag" text="">
        						<w2:textbox class="techstack-text" id="" label="" ref="data:dlt_techstack.techstack"></w2:textbox>
        						<xf:trigger class="techstack-remove-btn" type="button"
        							ev:onclick="scwin.removeTechStack.bind(this, $index);">
        							<xf:label><![CDATA[×]]></xf:label>
        						</xf:trigger>
        					</xf:group>
        				</w2:generator>
        			</xf:group>
        		</xf:group>
        	</section>

        	<!-- 원하는 인재상 섹션 -->
        	<section class="form-section">
        		<w2:textbox class="section-title" label="원하는 인재상"></w2:textbox>

        		<xf:group class="form-group">
        			<w2:textbox class="form-label" label="선호하는 성향 유형 (최대 4개 선택 가능)"></w2:textbox>

        			<xf:group class="button-grid">
        				<!-- BR** -->
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BRSD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BRSF]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BRTD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BRTF]]></xf:label>
        				</xf:trigger>

        				<!-- BI** -->
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BISD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BISF]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BITD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[BITF]]></xf:label>
        				</xf:trigger>

        				<!-- AR** -->
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[ARSD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[ARSF]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[ARTD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[ARTF]]></xf:label>
        				</xf:trigger>

        				<!-- AI** -->
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[AISD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[AISF]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[AITD]]></xf:label>
        				</xf:trigger>
        				<xf:trigger class="personality-btn" type="button" ev:onclick="scwin.personality_btn_onclick">
        					<xf:label><![CDATA[AITF]]></xf:label>
        				</xf:trigger>
        			</xf:group>

        			<w2:textbox class="help-text" label="우리 팀과 잘 맞을 것 같은 성향 유형을 선택해주세요."></w2:textbox>
        		</xf:group>

        		<xf:group class="form-row">
        			<xf:group class="form-group half">
        				<w2:textbox class="form-label" label="선호 경력"></w2:textbox>
        				<xf:select1 class="form-select" chooseOption="경력 선택" appearance="minimal" ref="data:dmp_postVo.experienceLevel">
        					<xf:choices>
        						<xf:item>
        							<xf:label><![CDATA[상관없음]]></xf:label>
        							<xf:value><![CDATA[any]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[신입 (0년)]]></xf:label>
        							<xf:value><![CDATA[new]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[1-2년]]></xf:label>
        							<xf:value><![CDATA[junior]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[3-5년]]></xf:label>
        							<xf:value><![CDATA[mid]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[5년 이상]]></xf:label>
        							<xf:value><![CDATA[senior]]></xf:value>
        						</xf:item>
        					</xf:choices>
        				</xf:select1>
        			</xf:group>

        			<xf:group class="form-group half">
        				<w2:textbox class="form-label" label="예상 연봉범위"></w2:textbox>
        				<xf:select1 class="form-select" chooseOption="연봉 선택" appearance="minimal" ref="data:dmp_postVo.salaryRange">
        					<xf:choices>
        						<xf:item>
        							<xf:label><![CDATA[2,500만원 미만]]></xf:label>
        							<xf:value><![CDATA[under25]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[2,500-3,500만원]]></xf:label>
        							<xf:value><![CDATA[25to35]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[3,500-5,000만원]]></xf:label>
        							<xf:value><![CDATA[35to50]]></xf:value>
        						</xf:item>
        						<xf:item>
        							<xf:label><![CDATA[5,000만원 이상]]></xf:label>
        							<xf:value><![CDATA[over50]]></xf:value>
        						</xf:item>
        					</xf:choices>
        				</xf:select1>
        			</xf:group>
        		</xf:group>

        		<xf:group class="form-group">
        			<w2:textbox class="form-label" label="원하는 인재상 상세 설명"></w2:textbox>
        			<xf:textarea class="form-textarea" placeholder="우리 회사에서 함께 일하고 싶은 개발자의 특징이나 역량을 구체적으로 설명해주세요." ref="data:dmp_postVo.description"></xf:textarea>
        		</xf:group>

        		<!-- 버튼 그룹 -->
        		<xf:group class="button-container">
        			<xf:trigger class="btn-cancel" type="button" id="btn_cancel_posting" ev:onclick="scwin.btn_cancel_posting_onclick">
        				<xf:label><![CDATA[취소]]></xf:label>
        			</xf:trigger>
        			<xf:trigger class="btn-primary" type="button" id="btn_create_posting" ev:onclick="scwin.btn_create_posting_onclick">
        				<xf:label><![CDATA[공고 등록하기]]></xf:label>
        			</xf:trigger>
        		</xf:group>
        	</section>
        </xf:group>
    </body>
</html>