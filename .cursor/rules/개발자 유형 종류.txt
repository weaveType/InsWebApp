1. B/A 축 - Builder vs Architect

B (Builder):빠른 구현 선호

MVP 우선 접근

실용적이고 즉각적인 해결책

"최소 시간으로 최대 효과"

A (Architect):체계적 설계 중시

확장성과 유지보수성 고려

패턴과 원칙 준수

"처음부터 올바른 구조로"

2. R/I 축 - Refactor vs Innovate

R (Refactor):기존 코드 개선에 집중

최적화와 성능 향상

안정성과 신뢰성 추구

검증된 방법론 선호

I (Innovate):새로운 기술과 접근법 시도

창의적이고 실험적인 해결책

최신 트렌드와 도구 활용

기존 방식에 도전

3. S/T 축 - Solo vs Team

S (Solo):독립적인 작업 선호

깊은 집중과 몰입

자기주도적 문제 해결

최소한의 의존성

T (Team):협업과 소통 중시

코드 리뷰 적극 참여

문서화와 공유

팀 규칙과 컨벤션 준수

4. D/F 축 - Debug vs Feature

D (Debug):버그 찾기와 수정에 열정

에러 처리와 예외 상황 고려

테스트 코드 작성

안정성과 신뢰성 우선

F (Feature):새로운 기능 개발 선호

빠른 프로토타이핑

사용자 가치 창출

창조적 구현

코드 분석 기준

B vs A 판단 요소:

함수/클래스 크기와 복잡도

디자인 패턴 사용 여부

추상화 수준

주석과 문서화 정도

의존성 관리 방식

R vs I 판단 요소:

사용하는 언어/프레임워크 버전

외부 라이브러리 활용도

코드 스타일의 일관성

리팩토링 흔적

실험적 기능 사용

S vs T 판단 요소:

코드 가독성과 네이밍

주석의 상세도

모듈화 정도

Git 커밋 메시지 스타일

협업 도구 사용 흔적

D vs F 판단 요소:

에러 처리 코드 비율

테스트 코드 존재 여부

방어적 프로그래밍 정도

기능 구현 속도

코드 완성도

분석 프로세스